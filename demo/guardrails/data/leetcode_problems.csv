leetcode_problem
"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
		You may assume that each input would have exactly one solution, and you may not use the same element twice.
		You can return the answer in any order.
		Example 1:
		Input: nums = [2,7,11,15], target = 9
		Output: [0,1]
		Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
		Example 2:
		Input: nums = [3,2,4], target = 6
		Output: [1,2]
		Example 3:
		Input: nums = [3,3], target = 6
		Output: [0,1]"
"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
		You may assume the two numbers do not contain any leading zero, except the number 0 itself.
		Example 1:
		Input: l1 = [2,4,3], l2 = [5,6,4]
		Output: [7,0,8]
		Explanation: 342 + 465 = 807.
		Example 2:
		Input: l1 = [0], l2 = [0]
		Output: [0]
		Example 3:
		Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
		Output: [8,9,9,9,0,0,0,1]"
"Given a string s, find the length of the longest substring without repeating characters.
		Example 1:
		Input: s = ""abcabcbb""
		Output: 3
		Explanation: The answer is ""abc"", with the length of 3.
		Example 2:
		Input: s = ""bbbbb""
		Output: 1
		Explanation: The answer is ""b"", with the length of 1.
		Example 3:
		Input: s = ""pwwkew""
		Output: 3
		Explanation: The answer is ""wke"", with the length of 3.
		Notice that the answer must be a substring, ""pwke"" is a subsequence and not a substring."
"Given a string s, return the longest palindromic substring in s.
		Example 1:
		Input: s = ""babad""
		Output: ""bab""
		Explanation: ""aba"" is also a valid answer.
		Example 2:
		Input: s = ""cbbd""
		Output: ""bb"""
"The string ""PAYPALISHIRING"" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
		P   A   H   N
		A P L S I I G
		Y   I   R
		And then read line by line: ""PAHNAPLSIIGYIR""
		Write the code that will take a string and make this conversion given a number of rows:
		string convert(string s, int numRows);
		Example 1:
		Input: s = ""PAYPALISHIRING"", numRows = 3
		Output: ""PAHNAPLSIIGYIR""
		Example 2:
		Input: s = ""PAYPALISHIRING"", numRows = 4
		Output: ""PINALSIGYAHRPI""
		Explanation:
		P     I    N
		A   L S  I G
		Y A   H R
		P     I
		Example 3:
		Input: s = ""A"", numRows = 1
		Output: ""A"""
"Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.
		Assume the environment does not allow you to store 64-bit integers (signed or unsigned).
		Example 1:
		Input: x = 123
		Output: 321
		Example 2:
		Input: x = -123
		Output: -321
		Example 3:
		Input: x = 120
		Output: 21"
"Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).
		The algorithm for myAtoi(string s) is as follows:
			Read in and ignore any leading whitespace.
			Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.
			Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.
			Convert these digits into an integer (i.e. ""123"" -> 123, ""0032"" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).
			If the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.
			Return the integer as the final result.
		Note:
			Only the space character ' ' is considered a whitespace character.
			Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.
		Example 1:
		Input: s = ""42""
		Output: 42
		Explanation: The underlined characters are what is read in, the caret is the current reader position.
		Step 1: ""42"" (no characters read because there is no leading whitespace)
		         ^
		Step 2: ""42"" (no characters read because there is neither a '-' nor '+')
		         ^
		Step 3: ""42"" (""42"" is read in)
		           ^
		The parsed integer is 42.
		Since 42 is in the range [-231, 231 - 1], the final result is 42.
		Example 2:
		Input: s = ""   -42""
		Output: -42
		Explanation:
		Step 1: ""   -42"" (leading whitespace is read and ignored)
		            ^
		Step 2: ""   -42"" ('-' is read, so the result should be negative)
		             ^
		Step 3: ""   -42"" (""42"" is read in)
		               ^
		The parsed integer is -42.
		Since -42 is in the range [-231, 231 - 1], the final result is -42.
		Example 3:
		Input: s = ""4193 with words""
		Output: 4193
		Explanation:
		Step 1: ""4193 with words"" (no characters read because there is no leading whitespace)
		         ^
		Step 2: ""4193 with words"" (no characters read because there is neither a '-' nor '+')
		         ^
		Step 3: ""4193 with words"" (""4193"" is read in; reading stops because the next character is a non-digit)
		             ^
		The parsed integer is 4193.
		Since 4193 is in the range [-231, 231 - 1], the final result is 4193."
"Given an integer x, return true if x is a palindrome, and false otherwise.
		Example 1:
		Input: x = 121
		Output: true
		Explanation: 121 reads as 121 from left to right and from right to left.
		Example 2:
		Input: x = -121
		Output: false
		Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
		Example 3:
		Input: x = 10
		Output: false
		Explanation: Reads 01 from right to left. Therefore it is not a palindrome."
"You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
		Find two lines that together with the x-axis form a container, such that the container contains the most water.
		Return the maximum amount of water a container can store.
		Notice that you may not slant the container.
		Example 1:
		Input: height = [1,8,6,2,5,4,8,3,7]
		Output: 49
		Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
		Example 2:
		Input: height = [1,1]
		Output: 1"
"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
		Symbol       Value
		I             1
		V             5
		X             10
		L             50
		C             100
		D             500
		M             1000
		For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
		Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
			I can be placed before V (5) and X (10) to make 4 and 9. 
			X can be placed before L (50) and C (100) to make 40 and 90. 
			C can be placed before D (500) and M (1000) to make 400 and 900.
		Given an integer, convert it to a roman numeral.
		Example 1:
		Input: num = 3
		Output: ""III""
		Explanation: 3 is represented as 3 ones.
		Example 2:
		Input: num = 58
		Output: ""LVIII""
		Explanation: L = 50, V = 5, III = 3.
		Example 3:
		Input: num = 1994
		Output: ""MCMXCIV""
		Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."
"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
		Symbol       Value
		I             1
		V             5
		X             10
		L             50
		C             100
		D             500
		M             1000
		For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.
		Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
			I can be placed before V (5) and X (10) to make 4 and 9. 
			X can be placed before L (50) and C (100) to make 40 and 90. 
			C can be placed before D (500) and M (1000) to make 400 and 900.
		Given a roman numeral, convert it to an integer.
		Example 1:
		Input: s = ""III""
		Output: 3
		Explanation: III = 3.
		Example 2:
		Input: s = ""LVIII""
		Output: 58
		Explanation: L = 50, V= 5, III = 3.
		Example 3:
		Input: s = ""MCMXCIV""
		Output: 1994
		Explanation: M = 1000, CM = 900, XC = 90 and IV = 4."
"Write a function to find the longest common prefix string amongst an array of strings.
		If there is no common prefix, return an empty string """".
		Example 1:
		Input: strs = [""flower"",""flow"",""flight""]
		Output: ""fl""
		Example 2:
		Input: strs = [""dog"",""racecar"",""car""]
		Output: """"
		Explanation: There is no common prefix among the input strings."
"Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
		Notice that the solution set must not contain duplicate triplets.
		Example 1:
		Input: nums = [-1,0,1,2,-1,-4]
		Output: [[-1,-1,2],[-1,0,1]]
		Explanation: 
		nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
		nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
		nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
		The distinct triplets are [-1,0,1] and [-1,-1,2].
		Notice that the order of the output and the order of the triplets does not matter.
		Example 2:
		Input: nums = [0,1,1]
		Output: []
		Explanation: The only possible triplet does not sum up to 0.
		Example 3:
		Input: nums = [0,0,0]
		Output: [[0,0,0]]
		Explanation: The only possible triplet sums up to 0."
"Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.
		Return the sum of the three integers.
		You may assume that each input would have exactly one solution.
		Example 1:
		Input: nums = [-1,2,1,-4], target = 1
		Output: 2
		Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
		Example 2:
		Input: nums = [0,0,0], target = 1
		Output: 0
		Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0)."
"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
		A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.
		Example 1:
		Input: digits = ""23""
		Output: [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]
		Example 2:
		Input: digits = """"
		Output: []
		Example 3:
		Input: digits = ""2""
		Output: [""a"",""b"",""c""]"
"Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:
			0 <= a, b, c, d < n
			a, b, c, and d are distinct.
			nums[a] + nums[b] + nums[c] + nums[d] == target
		You may return the answer in any order.
		Example 1:
		Input: nums = [1,0,-1,0,-2,2], target = 0
		Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
		Example 2:
		Input: nums = [2,2,2,2,2], target = 8
		Output: [[2,2,2,2]]"
"Given the head of a linked list, remove the nth node from the end of the list and return its head.
		Example 1:
		Input: head = [1,2,3,4,5], n = 2
		Output: [1,2,3,5]
		Example 2:
		Input: head = [1], n = 1
		Output: []
		Example 3:
		Input: head = [1,2], n = 1
		Output: [1]"
"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
		An input string is valid if:
			Open brackets must be closed by the same type of brackets.
			Open brackets must be closed in the correct order.
			Every close bracket has a corresponding open bracket of the same type.
		Example 1:
		Input: s = ""()""
		Output: true
		Example 2:
		Input: s = ""()[]{}""
		Output: true
		Example 3:
		Input: s = ""(]""
		Output: false"
"You are given the heads of two sorted linked lists list1 and list2.
		Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
		Return the head of the merged linked list.
		Example 1:
		Input: list1 = [1,2,4], list2 = [1,3,4]
		Output: [1,1,2,3,4,4]
		Example 2:
		Input: list1 = [], list2 = []
		Output: []
		Example 3:
		Input: list1 = [], list2 = [0]
		Output: [0]"
"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.
		Example 1:
		Input: n = 3
		Output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]
		Example 2:
		Input: n = 1
		Output: [""()""]"
"Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)
		Example 1:
		Input: head = [1,2,3,4]
		Output: [2,1,4,3]
		Example 2:
		Input: head = []
		Output: []
		Example 3:
		Input: head = [1]
		Output: [1]"
"Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same.
		Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
		Return k after placing the final result in the first k slots of nums.
		Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.
		Custom Judge:
		The judge will test your solution with the following code:
		int[] nums = [...]; // Input array
		int[] expectedNums = [...]; // The expected answer with correct length
		int k = removeDuplicates(nums); // Calls your implementation
		assert k == expectedNums.length;
		for (int i = 0; i < k; i++) {
		    assert nums[i] == expectedNums[i];
		}
		If all assertions pass, then your solution will be accepted.
		Example 1:
		Input: nums = [1,1,2]
		Output: 2, nums = [1,2,_]
		Explanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
		It does not matter what you leave beyond the returned k (hence they are underscores).
		Example 2:
		Input: nums = [0,0,1,1,1,2,2,3,3,4]
		Output: 5, nums = [0,1,2,3,4,_,_,_,_,_]
		Explanation: Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
		It does not matter what you leave beyond the returned k (hence they are underscores)."
"Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The relative order of the elements may be changed.
		Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
		Return k after placing the final result in the first k slots of nums.
		Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.
		Custom Judge:
		The judge will test your solution with the following code:
		int[] nums = [...]; // Input array
		int val = ...; // Value to remove
		int[] expectedNums = [...]; // The expected answer with correct length.
		                            // It is sorted with no values equaling val.
		int k = removeElement(nums, val); // Calls your implementation
		assert k == expectedNums.length;
		sort(nums, 0, k); // Sort the first k elements of nums
		for (int i = 0; i < actualLength; i++) {
		    assert nums[i] == expectedNums[i];
		}
		If all assertions pass, then your solution will be accepted.
		Example 1:
		Input: nums = [3,2,2,3], val = 3
		Output: 2, nums = [2,2,_,_]
		Explanation: Your function should return k = 2, with the first two elements of nums being 2.
		It does not matter what you leave beyond the returned k (hence they are underscores).
		Example 2:
		Input: nums = [0,1,2,2,3,0,4,2], val = 2
		Output: 5, nums = [0,1,4,0,3,_,_,_]
		Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
		Note that the five elements can be returned in any order.
		It does not matter what you leave beyond the returned k (hence they are underscores)."
"Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.
		Example 1:
		Input: haystack = ""sadbutsad"", needle = ""sad""
		Output: 0
		Explanation: ""sad"" occurs at index 0 and 6.
		The first occurrence is at index 0, so we return 0.
		Example 2:
		Input: haystack = ""leetcode"", needle = ""leeto""
		Output: -1
		Explanation: ""leeto"" did not occur in ""leetcode"", so we return -1."
"Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.
		The integer division should truncate toward zero, which means losing its fractional part. For example, 8.345 would be truncated to 8, and -2.7335 would be truncated to -2.
		Return the quotient after dividing dividend by divisor.
		Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231, 231 − 1]. For this problem, if the quotient is strictly greater than 231 - 1, then return 231 - 1, and if the quotient is strictly less than -231, then return -231.
		Example 1:
		Input: dividend = 10, divisor = 3
		Output: 3
		Explanation: 10/3 = 3.33333.. which is truncated to 3.
		Example 2:
		Input: dividend = 7, divisor = -3
		Output: -2
		Explanation: 7/-3 = -2.33333.. which is truncated to -2."
"# Medium
"
"There is an integer array nums sorted in ascending order (with distinct values).
		Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
		Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
		You must write an algorithm with O(log n) runtime complexity.
		Example 1:
		Input: nums = [4,5,6,7,0,1,2], target = 0
		Output: 4
		Example 2:
		Input: nums = [4,5,6,7,0,1,2], target = 3
		Output: -1
		Example 3:
		Input: nums = [1], target = 0
		Output: -1"
"Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
		If target is not found in the array, return [-1, -1].
		You must write an algorithm with O(log n) runtime complexity.
		Example 1:
		Input: nums = [5,7,7,8,8,10], target = 8
		Output: [3,4]
		Example 2:
		Input: nums = [5,7,7,8,8,10], target = 6
		Output: [-1,-1]
		Example 3:
		Input: nums = [], target = 0
		Output: [-1,-1]"
"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
		You must write an algorithm with O(log n) runtime complexity.
		Example 1:
		Input: nums = [1,3,5,6], target = 5
		Output: 2
		Example 2:
		Input: nums = [1,3,5,6], target = 2
		Output: 1
		Example 3:
		Input: nums = [1,3,5,6], target = 7
		Output: 4"
"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
			Each row must contain the digits 1-9 without repetition.
			Each column must contain the digits 1-9 without repetition.
			Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
		Note:
			A Sudoku board (partially filled) could be valid but is not necessarily solvable.
			Only the filled cells need to be validated according to the mentioned rules.
		Example 1:
		Input: board = 
		[[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""]
		,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
		,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
		,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
		,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
		,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
		,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
		,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
		,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
		Output: true
		Example 2:
		Input: board = 
		[[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""]
		,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
		,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
		,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
		,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
		,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
		,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
		,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
		,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
		Output: false
		Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid."
"The count-and-say sequence is a sequence of digit strings defined by the recursive formula:
			countAndSay(1) = ""1""
			countAndSay(n) is the way you would ""say"" the digit string from countAndSay(n-1), which is then converted into a different digit string.
		To determine how you ""say"" a digit string, split it into the minimal number of substrings such that each substring contains exactly one unique digit. Then for each substring, say the number of digits, then say the digit. Finally, concatenate every said digit.
		For example, the saying and conversion for digit string ""3322251"":
		Given a positive integer n, return the nth term of the count-and-say sequence.
		Example 1:
		Input: n = 1
		Output: ""1""
		Explanation: This is the base case.
		Example 2:
		Input: n = 4
		Output: ""1211""
		Explanation:
		countAndSay(1) = ""1""
		countAndSay(2) = say ""1"" = one 1 = ""11""
		countAndSay(3) = say ""11"" = two 1's = ""21""
		countAndSay(4) = say ""21"" = one 2 + one 1 = ""12"" + ""11"" = ""1211"""
"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
		The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
		The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.
		Example 1:
		Input: candidates = [2,3,6,7], target = 7
		Output: [[2,2,3],[7]]
		Explanation:
		2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
		7 is a candidate, and 7 = 7.
		These are the only two combinations.
		Example 2:
		Input: candidates = [2,3,5], target = 8
		Output: [[2,2,2,2],[2,3,3],[3,5]]
		Example 3:
		Input: candidates = [2], target = 1
		Output: []"
"Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
		Each number in candidates may only be used once in the combination.
		Note: The solution set must not contain duplicate combinations.
		Example 1:
		Input: candidates = [10,1,2,7,6,1,5], target = 8
		Output: 
		[
		[1,1,6],
		[1,2,5],
		[1,7],
		[2,6]
		]
		Example 2:
		Input: candidates = [2,5,2,1,2], target = 5
		Output: 
		[
		[1,2,2],
		[5]
		]"
"Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.
		Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.
		Example 1:
		Input: num1 = ""2"", num2 = ""3""
		Output: ""6""
		Example 2:
		Input: num1 = ""123"", num2 = ""456""
		Output: ""56088"""
"You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
		Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
			0 <= j <= nums[i] and
			i + j < n
		Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].
		Example 1:
		Input: nums = [2,3,1,1,4]
		Output: 2
		Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.
		Example 2:
		Input: nums = [2,3,0,1,4]
		Output: 2"
"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
		Example 1:
		Input: nums = [1,2,3]
		Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
		Example 2:
		Input: nums = [0,1]
		Output: [[0,1],[1,0]]
		Example 3:
		Input: nums = [1]
		Output: [[1]]"
"Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.
		Example 1:
		Input: nums = [1,1,2]
		Output:
		[[1,1,2],
		 [1,2,1],
		 [2,1,1]]
		Example 2:
		Input: nums = [1,2,3]
		Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]"
"# Medium
"
"Given an array of strings strs, group the anagrams together. You can return the answer in any order.
		An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
		Example 1:
		Input: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]
		Output: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]
		Example 2:
		Input: strs = [""""]
		Output: [[""""]]
		Example 3:
		Input: strs = [""a""]
		Output: [[""a""]]"
"Implement pow(x, n), which calculates x raised to the power n (i.e., xn).
		Example 1:
		Input: x = 2.00000, n = 10
		Output: 1024.00000
		Example 2:
		Input: x = 2.10000, n = 3
		Output: 9.26100
		Example 3:
		Input: x = 2.00000, n = -2
		Output: 0.25000
		Explanation: 2-2 = 1/22 = 1/4 = 0.25"
"Given an integer array nums, find the subarray with the largest sum, and return its sum.
		Example 1:
		Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
		Output: 6
		Explanation: The subarray [4,-1,2,1] has the largest sum 6.
		Example 2:
		Input: nums = [1]
		Output: 1
		Explanation: The subarray [1] has the largest sum 1.
		Example 3:
		Input: nums = [5,4,-1,7,8]
		Output: 23
		Explanation: The subarray [5,4,-1,7,8] has the largest sum 23."
"Given an m x n matrix, return all elements of the matrix in spiral order.
		Example 1:
		Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
		Output: [1,2,3,6,9,8,7,4,5]
		Example 2:
		Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
		Output: [1,2,3,4,8,12,11,10,9,5,6,7]"
"You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.
		Return true if you can reach the last index, or false otherwise.
		Example 1:
		Input: nums = [2,3,1,1,4]
		Output: true
		Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
		Example 2:
		Input: nums = [3,2,1,0,4]
		Output: false
		Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index."
"Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.
		Example 1:
		Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
		Output: [[1,6],[8,10],[15,18]]
		Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
		Example 2:
		Input: intervals = [[1,4],[4,5]]
		Output: [[1,5]]
		Explanation: Intervals [1,4] and [4,5] are considered overlapping."
"You are given an array of non-overlapping intervals intervals where intervals[i] = [starti, endi] represent the start and the end of the ith interval and intervals is sorted in ascending order by starti. You are also given an interval newInterval = [start, end] that represents the start and end of another interval.
		Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).
		Return intervals after the insertion.
		Example 1:
		Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
		Output: [[1,5],[6,9]]
		Example 2:
		Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
		Output: [[1,2],[3,10],[12,16]]
		Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10]."
"Given a string s consisting of words and spaces, return the length of the last word in the string.
		A word is a maximal substring consisting of non-space characters only.
		Example 1:
		Input: s = ""Hello World""
		Output: 5
		Explanation: The last word is ""World"" with length 5.
		Example 2:
		Input: s = ""   fly me   to   the moon  ""
		Output: 4
		Explanation: The last word is ""moon"" with length 4.
		Example 3:
		Input: s = ""luffy is still joyboy""
		Output: 6
		Explanation: The last word is ""joyboy"" with length 6."
"Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.
		Example 1:
		Input: n = 3
		Output: [[1,2,3],[8,9,4],[7,6,5]]
		Example 2:
		Input: n = 1
		Output: [[1]]"
"Given the head of a linked list, rotate the list to the right by k places.
		Example 1:
		Input: head = [1,2,3,4,5], k = 2
		Output: [4,5,1,2,3]
		Example 2:
		Input: head = [0,1,2], k = 4
		Output: [2,0,1]"
"There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
		Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
		The test cases are generated so that the answer will be less than or equal to 2 * 109.
		Example 1:
		Input: m = 3, n = 7
		Output: 28
		Example 2:
		Input: m = 3, n = 2
		Output: 3
		Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
		1. Right -> Down -> Down
		2. Down -> Down -> Right
		3. Down -> Right -> Down"
"You are given an m x n integer array grid. There is a robot initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
		An obstacle and space are marked as 1 or 0 respectively in grid. A path that the robot takes cannot include any square that is an obstacle.
		Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
		The testcases are generated so that the answer will be less than or equal to 2 * 109.
		Example 1:
		Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
		Output: 2
		Explanation: There is one obstacle in the middle of the 3x3 grid above.
		There are two ways to reach the bottom-right corner:
		1. Right -> Right -> Down -> Down
		2. Down -> Down -> Right -> Right
		Example 2:
		Input: obstacleGrid = [[0,1],[0,0]]
		Output: 1"
"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.
		Note: You can only move either down or right at any point in time.
		Example 1:
		Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
		Output: 7
		Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
		Example 2:
		Input: grid = [[1,2,3],[4,5,6]]
		Output: 12"
"You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.
		Increment the large integer by one and return the resulting array of digits.
		Example 1:
		Input: digits = [1,2,3]
		Output: [1,2,4]
		Explanation: The array represents the integer 123.
		Incrementing by one gives 123 + 1 = 124.
		Thus, the result should be [1,2,4].
		Example 2:
		Input: digits = [4,3,2,1]
		Output: [4,3,2,2]
		Explanation: The array represents the integer 4321.
		Incrementing by one gives 4321 + 1 = 4322.
		Thus, the result should be [4,3,2,2].
		Example 3:
		Input: digits = [9]
		Output: [1,0]
		Explanation: The array represents the integer 9.
		Incrementing by one gives 9 + 1 = 10.
		Thus, the result should be [1,0]."
"Given two binary strings a and b, return their sum as a binary string.
		Example 1:
		Input: a = ""11"", b = ""1""
		Output: ""100""
		Example 2:
		Input: a = ""1010"", b = ""1011""
		Output: ""10101"""
"Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.
		You must not use any built-in exponent function or operator.
			For example, do not use pow(x, 0.5) in c++ or x ** 0.5 in python.
		Example 1:
		Input: x = 4
		Output: 2
		Explanation: The square root of 4 is 2, so we return 2.
		Example 2:
		Input: x = 8
		Output: 2
		Explanation: The square root of 8 is 2.82842..., and since we round it down to the nearest integer, 2 is returned."
"You are climbing a staircase. It takes n steps to reach the top.
		Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
		Example 1:
		Input: n = 2
		Output: 2
		Explanation: There are two ways to climb to the top.
		1. 1 step + 1 step
		2. 2 steps
		Example 2:
		Input: n = 3
		Output: 3
		Explanation: There are three ways to climb to the top.
		1. 1 step + 1 step + 1 step
		2. 1 step + 2 steps
		3. 2 steps + 1 step"
"Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.
		In a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.
		The canonical path should have the following format:
			The path starts with a single slash '/'.
			Any two directories are separated by a single slash '/'.
			The path does not end with a trailing '/'.
			The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')
		Return the simplified canonical path.
		Example 1:
		Input: path = ""/home/""
		Output: ""/home""
		Explanation: Note that there is no trailing slash after the last directory name.
		Example 2:
		Input: path = ""/../""
		Output: ""/""
		Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.
		Example 3:
		Input: path = ""/home//foo/""
		Output: ""/home/foo""
		Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one."
"# Medium
"
"You are given an m x n integer matrix matrix with the following two properties:
			Each row is sorted in non-decreasing order.
			The first integer of each row is greater than the last integer of the previous row.
		Given an integer target, return true if target is in matrix or false otherwise.
		You must write a solution in O(log(m * n)) time complexity.
		Example 1:
		Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
		Output: true
		Example 2:
		Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
		Output: false"
"# Medium
"
"Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].
		You may return the answer in any order.
		Example 1:
		Input: n = 4, k = 2
		Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
		Explanation: There are 4 choose 2 = 6 total combinations.
		Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
		Example 2:
		Input: n = 1, k = 1
		Output: [[1]]
		Explanation: There is 1 choose 1 = 1 total combination."
"Given an integer array nums of unique elements, return all possible subsets (the power set).
		The solution set must not contain duplicate subsets. Return the solution in any order.
		Example 1:
		Input: nums = [1,2,3]
		Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
		Example 2:
		Input: nums = [0]
		Output: [[],[0]]"
"Given an m x n grid of characters board and a string word, return true if word exists in the grid.
		The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.
		Example 1:
		Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCCED""
		Output: true
		Example 2:
		Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""SEE""
		Output: true
		Example 3:
		Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCB""
		Output: false"
"Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.
		Since it is impossible to change the length of the array in some languages, you must instead have the result be placed in the first part of the array nums. More formally, if there are k elements after removing the duplicates, then the first k elements of nums should hold the final result. It does not matter what you leave beyond the first k elements.
		Return k after placing the final result in the first k slots of nums.
		Do not allocate extra space for another array. You must do this by modifying the input array in-place with O(1) extra memory.
		Custom Judge:
		The judge will test your solution with the following code:
		int[] nums = [...]; // Input array
		int[] expectedNums = [...]; // The expected answer with correct length
		int k = removeDuplicates(nums); // Calls your implementation
		assert k == expectedNums.length;
		for (int i = 0; i < k; i++) {
		    assert nums[i] == expectedNums[i];
		}
		If all assertions pass, then your solution will be accepted.
		Example 1:
		Input: nums = [1,1,1,2,2,3]
		Output: 5, nums = [1,1,2,2,3,_]
		Explanation: Your function should return k = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively.
		It does not matter what you leave beyond the returned k (hence they are underscores).
		Example 2:
		Input: nums = [0,0,1,1,1,1,2,3,3]
		Output: 7, nums = [0,0,1,1,2,3,3,_,_]
		Explanation: Your function should return k = 7, with the first seven elements of nums being 0, 0, 1, 1, 2, 3 and 3 respectively.
		It does not matter what you leave beyond the returned k (hence they are underscores)."
"There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).
		Before being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,4,4,5,6,6,7] might be rotated at pivot index 5 and become [4,5,6,6,7,0,1,2,4,4].
		Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
		You must decrease the overall operation steps as much as possible.
		Example 1:
		Input: nums = [2,5,6,0,0,1,2], target = 0
		Output: true
		Example 2:
		Input: nums = [2,5,6,0,0,1,2], target = 3
		Output: false"
"Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.
		Example 1:
		Input: head = [1,2,3,3,4,4,5]
		Output: [1,2,5]
		Example 2:
		Input: head = [1,1,1,2,3]
		Output: [2,3]"
"Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.
		Example 1:
		Input: head = [1,1,2]
		Output: [1,2]
		Example 2:
		Input: head = [1,1,2,3,3]
		Output: [1,2,3]"
"Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
		You should preserve the original relative order of the nodes in each of the two partitions.
		Example 1:
		Input: head = [1,4,3,2,5,2], x = 3
		Output: [1,2,2,4,3,5]
		Example 2:
		Input: head = [2,1], x = 2
		Output: [1,2]"
"# Easy
"
"An n-bit gray code sequence is a sequence of 2n integers where:
			Every integer is in the inclusive range [0, 2n - 1],
			The first integer is 0,
			An integer appears no more than once in the sequence,
			The binary representation of every pair of adjacent integers differs by exactly one bit, and
			The binary representation of the first and last integers differs by exactly one bit.
		Given an integer n, return any valid n-bit gray code sequence.
		Example 1:
		Input: n = 2
		Output: [0,1,3,2]
		Explanation:
		The binary representation of [0,1,3,2] is [00,01,11,10].
		- 00 and 01 differ by one bit
		- 01 and 11 differ by one bit
		- 11 and 10 differ by one bit
		- 10 and 00 differ by one bit
		[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
		- 00 and 10 differ by one bit
		- 10 and 11 differ by one bit
		- 11 and 01 differ by one bit
		- 01 and 00 differ by one bit
		Example 2:
		Input: n = 1
		Output: [0,1]"
"Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
		The solution set must not contain duplicate subsets. Return the solution in any order.
		Example 1:
		Input: nums = [1,2,2]
		Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]
		Example 2:
		Input: nums = [0]
		Output: [[],[0]]"
"A message containing letters from A-Z can be encoded into numbers using the following mapping:
		'A' -> ""1""
		'B' -> ""2""
		...
		'Z' -> ""26""
		To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, ""11106"" can be mapped into:
			""AAJF"" with the grouping (1 1 10 6)
			""KJF"" with the grouping (11 10 6)
		Note that the grouping (1 11 06) is invalid because ""06"" cannot be mapped into 'F' since ""6"" is different from ""06"".
		Given a string s containing only digits, return the number of ways to decode it.
		The test cases are generated so that the answer fits in a 32-bit integer.
		Example 1:
		Input: s = ""12""
		Output: 2
		Explanation: ""12"" could be decoded as ""AB"" (1 2) or ""L"" (12).
		Example 2:
		Input: s = ""226""
		Output: 3
		Explanation: ""226"" could be decoded as ""BZ"" (2 26), ""VF"" (22 6), or ""BBF"" (2 2 6).
		Example 3:
		Input: s = ""06""
		Output: 0
		Explanation: ""06"" cannot be mapped to ""F"" because of the leading zero (""6"" is different from ""06"")."
"Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.
		Example 1:
		Input: head = [1,2,3,4,5], left = 2, right = 4
		Output: [1,4,3,2,5]
		Example 2:
		Input: head = [5], left = 1, right = 1
		Output: [5]"
"A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.
			For example, ""0.1.2.201"" and ""192.168.1.1"" are valid IP addresses, but ""0.011.255.245"", ""192.168.1.312"" and ""192.168@1.1"" are invalid IP addresses.
		Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.
		Example 1:
		Input: s = ""25525511135""
		Output: [""255.255.11.135"",""255.255.111.35""]
		Example 2:
		Input: s = ""0000""
		Output: [""0.0.0.0""]
		Example 3:
		Input: s = ""101023""
		Output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]"
"Given the root of a binary tree, return the inorder traversal of its nodes' values.
		Example 1:
		Input: root = [1,null,2,3]
		Output: [1,3,2]
		Example 2:
		Input: root = []
		Output: []
		Example 3:
		Input: root = [1]
		Output: [1]"
"Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.
		Example 1:
		Input: n = 3
		Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]
		Example 2:
		Input: n = 1
		Output: [[1]]"
"Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.
		Example 1:
		Input: n = 3
		Output: 5
		Example 2:
		Input: n = 1
		Output: 1"
"Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.
		An interleaving of two strings s and t is a configuration where s and t are divided into n and m substrings respectively, such that:
			s = s1 + s2 + ... + sn
			t = t1 + t2 + ... + tm
			|n - m| <= 1
			The interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...
		Note: a + b is the concatenation of strings a and b.
		Example 1:
		Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac""
		Output: true
		Explanation: One way to obtain s3 is:
		Split s1 into s1 = ""aa"" + ""bc"" + ""c"", and s2 into s2 = ""dbbc"" + ""a"".
		Interleaving the two splits, we get ""aa"" + ""dbbc"" + ""bc"" + ""a"" + ""c"" = ""aadbbcbcac"".
		Since s3 can be obtained by interleaving s1 and s2, we return true.
		Example 2:
		Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc""
		Output: false
		Explanation: Notice how it is impossible to interleave s2 with any other string to obtain s3.
		Example 3:
		Input: s1 = """", s2 = """", s3 = """"
		Output: true"
"Given the root of a binary tree, determine if it is a valid binary search tree (BST).
		A valid BST is defined as follows:
			The left subtree of a node contains only nodes with keys less than the node's key.
			The right subtree of a node contains only nodes with keys greater than the node's key.
			Both the left and right subtrees must also be binary search trees.
		Example 1:
		Input: root = [2,1,3]
		Output: true
		Example 2:
		Input: root = [5,1,4,null,null,3,6]
		Output: false
		Explanation: The root node's value is 5 but its right child's value is 4."
"# Medium
"
"Given the roots of two binary trees p and q, write a function to check if they are the same or not.
		Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.
		Example 1:
		Input: p = [1,2,3], q = [1,2,3]
		Output: true
		Example 2:
		Input: p = [1,2], q = [1,null,2]
		Output: false
		Example 3:
		Input: p = [1,2,1], q = [1,1,2]
		Output: false"
"Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: [[3],[9,20],[15,7]]
		Example 2:
		Input: root = [1]
		Output: [[1]]
		Example 3:
		Input: root = []
		Output: []"
"Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: [[3],[20,9],[15,7]]
		Example 2:
		Input: root = [1]
		Output: [[1]]
		Example 3:
		Input: root = []
		Output: []"
"Given the root of a binary tree, return its maximum depth.
		A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: 3
		Example 2:
		Input: root = [1,null,2]
		Output: 2"
"Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
		Example 1:
		Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
		Output: [3,9,20,null,null,15,7]
		Example 2:
		Input: preorder = [-1], inorder = [-1]
		Output: [-1]"
"Given two integer arrays inorder and postorder where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the binary tree.
		Example 1:
		Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
		Output: [3,9,20,null,null,15,7]
		Example 2:
		Input: inorder = [-1], postorder = [-1]
		Output: [-1]"
"Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: [[15,7],[9,20],[3]]
		Example 2:
		Input: root = [1]
		Output: [[1]]
		Example 3:
		Input: root = []
		Output: []"
"Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
		Example 1:
		Input: nums = [-10,-3,0,5,9]
		Output: [0,-3,9,-10,null,5]
		Explanation: [0,-10,5,null,-3,null,9] is also accepted:
		Example 2:
		Input: nums = [1,3]
		Output: [3,1]
		Explanation: [1,null,3] and [3,1] are both height-balanced BSTs."
"Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.
		Example 1:
		Input: head = [-10,-3,0,5,9]
		Output: [0,-3,9,-10,null,5]
		Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.
		Example 2:
		Input: head = []
		Output: []"
"Given a binary tree, determine if it is height-balanced.
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: true
		Example 2:
		Input: root = [1,2,2,3,3,null,null,4,4]
		Output: false
		Example 3:
		Input: root = []
		Output: true"
"Given a binary tree, find its minimum depth.
		The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
		Note: A leaf is a node with no children.
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: 2
		Example 2:
		Input: root = [2,null,3,null,4,null,5,null,6]
		Output: 5"
"Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
		A leaf is a node with no children.
		Example 1:
		Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
		Output: true
		Explanation: The root-to-leaf path with the target sum is shown.
		Example 2:
		Input: root = [1,2,3], targetSum = 5
		Output: false
		Explanation: There two root-to-leaf paths in the tree:
		(1 --> 2): The sum is 3.
		(1 --> 3): The sum is 4.
		There is no root-to-leaf path with sum = 5.
		Example 3:
		Input: root = [], targetSum = 0
		Output: false
		Explanation: Since the tree is empty, there are no root-to-leaf paths."
"Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.
		A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.
		Example 1:
		Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
		Output: [[5,4,11,2],[5,8,4,5]]
		Explanation: There are two paths whose sum equals targetSum:
		5 + 4 + 11 + 2 = 22
		5 + 8 + 4 + 5 = 22
		Example 2:
		Input: root = [1,2,3], targetSum = 5
		Output: []
		Example 3:
		Input: root = [1,2], targetSum = 0
		Output: []"
"# Medium
"
"# Medium
"
"# Medium
"
"Given an integer numRows, return the first numRows of Pascal's triangle.
		In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
		Example 1:
		Input: numRows = 5
		Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
		Example 2:
		Input: numRows = 1
		Output: [[1]]"
"Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal's triangle.
		In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
		Example 1:
		Input: rowIndex = 3
		Output: [1,3,3,1]
		Example 2:
		Input: rowIndex = 0
		Output: [1]
		Example 3:
		Input: rowIndex = 1
		Output: [1,1]"
"Given a triangle array, return the minimum path sum from top to bottom.
		For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.
		Example 1:
		Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
		Output: 11
		Explanation: The triangle looks like:
		   2
		  3 4
		 6 5 7
		4 1 8 3
		The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
		Example 2:
		Input: triangle = [[-10]]
		Output: -10"
"You are given an array prices where prices[i] is the price of a given stock on the ith day.
		You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
		Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.
		Example 1:
		Input: prices = [7,1,5,3,6,4]
		Output: 5
		Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
		Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
		Example 2:
		Input: prices = [7,6,4,3,1]
		Output: 0
		Explanation: In this case, no transactions are done and the max profit = 0."
"You are given an integer array prices where prices[i] is the price of a given stock on the ith day.
		On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.
		Find and return the maximum profit you can achieve.
		Example 1:
		Input: prices = [7,1,5,3,6,4]
		Output: 7
		Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
		Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
		Total profit is 4 + 3 = 7.
		Example 2:
		Input: prices = [1,2,3,4,5]
		Output: 4
		Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
		Total profit is 4.
		Example 3:
		Input: prices = [7,6,4,3,1]
		Output: 0
		Explanation: There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0."
"A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward. Alphanumeric characters include letters and numbers.
		Given a string s, return true if it is a palindrome, or false otherwise.
		Example 1:
		Input: s = ""A man, a plan, a canal: Panama""
		Output: true
		Explanation: ""amanaplanacanalpanama"" is a palindrome.
		Example 2:
		Input: s = ""race a car""
		Output: false
		Explanation: ""raceacar"" is not a palindrome.
		Example 3:
		Input: s = "" ""
		Output: true
		Explanation: s is an empty string """" after removing non-alphanumeric characters.
		Since an empty string reads the same forward and backward, it is a palindrome."
"Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.
		You must write an algorithm that runs in O(n) time.
		Example 1:
		Input: nums = [100,4,200,1,3,2]
		Output: 4
		Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.
		Example 2:
		Input: nums = [0,3,7,2,5,8,4,6,0,1]
		Output: 9"
"You are given the root of a binary tree containing digits from 0 to 9 only.
		Each root-to-leaf path in the tree represents a number.
			For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
		Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.
		A leaf node is a node with no children.
		Example 1:
		Input: root = [1,2,3]
		Output: 25
		Explanation:
		The root-to-leaf path 1->2 represents the number 12.
		The root-to-leaf path 1->3 represents the number 13.
		Therefore, sum = 12 + 13 = 25.
		Example 2:
		Input: root = [4,9,0,5,1]
		Output: 1026
		Explanation:
		The root-to-leaf path 4->9->5 represents the number 495.
		The root-to-leaf path 4->9->1 represents the number 491.
		The root-to-leaf path 4->0 represents the number 40.
		Therefore, sum = 495 + 491 + 40 = 1026."
"# Medium
"
"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.
		Example 1:
		Input: s = ""aab""
		Output: [[""a"",""a"",""b""],[""aa"",""b""]]
		Example 2:
		Input: s = ""a""
		Output: [[""a""]]"
"# Medium
"
"There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].
		You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.
		Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique
		Example 1:
		Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
		Output: 3
		Explanation:
		Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
		Travel to station 4. Your tank = 4 - 1 + 5 = 8
		Travel to station 0. Your tank = 8 - 2 + 1 = 7
		Travel to station 1. Your tank = 7 - 3 + 2 = 6
		Travel to station 2. Your tank = 6 - 4 + 3 = 5
		Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
		Therefore, return 3 as the starting index.
		Example 2:
		Input: gas = [2,3,4], cost = [3,4,3]
		Output: -1
		Explanation:
		You can't start at station 0 or 1, as there is not enough gas to travel to the next station.
		Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
		Travel to station 0. Your tank = 4 - 3 + 2 = 3
		Travel to station 1. Your tank = 3 - 3 + 3 = 3
		You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.
		Therefore, you can't travel around the circuit once no matter where you start."
"Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.
		You must implement a solution with a linear runtime complexity and use only constant extra space.
		Example 1:
		Input: nums = [2,2,1]
		Output: 1
		Example 2:
		Input: nums = [4,1,2,1,2]
		Output: 4
		Example 3:
		Input: nums = [1]
		Output: 1"
"Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.
		You must implement a solution with a linear runtime complexity and use only constant extra space.
		Example 1:
		Input: nums = [2,2,3,2]
		Output: 3
		Example 2:
		Input: nums = [0,1,0,1,0,1,99]
		Output: 99"
"# Medium
"
"Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.
		Note that the same word in the dictionary may be reused multiple times in the segmentation.
		Example 1:
		Input: s = ""leetcode"", wordDict = [""leet"",""code""]
		Output: true
		Explanation: Return true because ""leetcode"" can be segmented as ""leet code"".
		Example 2:
		Input: s = ""applepenapple"", wordDict = [""apple"",""pen""]
		Output: true
		Explanation: Return true because ""applepenapple"" can be segmented as ""apple pen apple"".
		Note that you are allowed to reuse a dictionary word.
		Example 3:
		Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
		Output: false"
"Given head, the head of a linked list, determine if the linked list has a cycle in it.
		There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
		Return true if there is a cycle in the linked list. Otherwise, return false.
		Example 1:
		Input: head = [3,2,0,-4], pos = 1
		Output: true
		Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
		Example 2:
		Input: head = [1,2], pos = 0
		Output: true
		Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
		Example 3:
		Input: head = [1], pos = -1
		Output: false
		Explanation: There is no cycle in the linked list."
"Given the head of a linked list, return the node where the cycle begins. If there is no cycle, return null.
		There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to (0-indexed). It is -1 if there is no cycle. Note that pos is not passed as a parameter.
		Do not modify the linked list.
		Example 1:
		Input: head = [3,2,0,-4], pos = 1
		Output: tail connects to node index 1
		Explanation: There is a cycle in the linked list, where tail connects to the second node.
		Example 2:
		Input: head = [1,2], pos = 0
		Output: tail connects to node index 0
		Explanation: There is a cycle in the linked list, where tail connects to the first node.
		Example 3:
		Input: head = [1], pos = -1
		Output: no cycle
		Explanation: There is no cycle in the linked list."
"# Medium
"
"Given the root of a binary tree, return the preorder traversal of its nodes' values.
		Example 1:
		Input: root = [1,null,2,3]
		Output: [1,2,3]
		Example 2:
		Input: root = []
		Output: []
		Example 3:
		Input: root = [1]
		Output: [1]"
"Given the root of a binary tree, return the postorder traversal of its nodes' values.
		Example 1:
		Input: root = [1,null,2,3]
		Output: [3,2,1]
		Example 2:
		Input: root = []
		Output: []
		Example 3:
		Input: root = [1]
		Output: [1]"
"Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.
		Implement the LRUCache class:
			LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
			int get(int key) Return the value of the key if the key exists, otherwise return -1.
			void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
		The functions get and put must each run in O(1) average time complexity.
		Example 1:
		Input
		[""LRUCache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""put"", ""get"", ""get"", ""get""]
		[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
		Output
		[null, null, null, 1, null, -1, null, -1, 3, 4]
		Explanation
		LRUCache lRUCache = new LRUCache(2);
		lRUCache.put(1, 1); // cache is {1=1}
		lRUCache.put(2, 2); // cache is {1=1, 2=2}
		lRUCache.get(1);    // return 1
		lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
		lRUCache.get(2);    // returns -1 (not found)
		lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
		lRUCache.get(1);    // return -1 (not found)
		lRUCache.get(3);    // return 3
		lRUCache.get(4);    // return 4"
"Given the head of a singly linked list, sort the list using insertion sort, and return the sorted list's head.
		The steps of the insertion sort algorithm:
			Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.
			At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.
			It repeats until no input elements remain.
		The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.
		Example 1:
		Input: head = [4,2,1,3]
		Output: [1,2,3,4]
		Example 2:
		Input: head = [-1,5,3,4,0]
		Output: [-1,0,3,4,5]"
"Given the head of a linked list, return the list after sorting it in ascending order.
		Example 1:
		Input: head = [4,2,1,3]
		Output: [1,2,3,4]
		Example 2:
		Input: head = [-1,5,3,4,0]
		Output: [-1,0,3,4,5]
		Example 3:
		Input: head = []
		Output: []"
"You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
		Evaluate the expression. Return an integer that represents the value of the expression.
		Note that:
			The valid operators are '+', '-', '*', and '/'.
			Each operand may be an integer or another expression.
			The division between two integers always truncates toward zero.
			There will not be any division by zero.
			The input represents a valid arithmetic expression in a reverse polish notation.
			The answer and all the intermediate calculations can be represented in a 32-bit integer.
		Example 1:
		Input: tokens = [""2"",""1"",""+"",""3"",""*""]
		Output: 9
		Explanation: ((2 + 1) * 3) = 9
		Example 2:
		Input: tokens = [""4"",""13"",""5"",""/"",""+""]
		Output: 6
		Explanation: (4 + (13 / 5)) = 6
		Example 3:
		Input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""]
		Output: 22
		Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
		= ((10 * (6 / (12 * -11))) + 17) + 5
		= ((10 * (6 / -132)) + 17) + 5
		= ((10 * 0) + 17) + 5
		= (0 + 17) + 5
		= 17 + 5
		= 22"
"Given an input string s, reverse the order of the words.
		A word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.
		Return a string of the words in reverse order concatenated by a single space.
		Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.
		Example 1:
		Input: s = ""the sky is blue""
		Output: ""blue is sky the""
		Example 2:
		Input: s = ""  hello world  ""
		Output: ""world hello""
		Explanation: Your reversed string should not contain leading or trailing spaces.
		Example 3:
		Input: s = ""a good   example""
		Output: ""example good a""
		Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string."
"Given an integer array nums, find a subarray that has the largest product, and return the product.
		The test cases are generated so that the answer will fit in a 32-bit integer.
		Example 1:
		Input: nums = [2,3,-2,4]
		Output: 6
		Explanation: [2,3] has the largest product 6.
		Example 2:
		Input: nums = [-2,0,-1]
		Output: 0
		Explanation: The result cannot be 2, because [-2,-1] is not a subarray."
"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:
			[4,5,6,7,0,1,2] if it was rotated 4 times.
			[0,1,2,4,5,6,7] if it was rotated 7 times.
		Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].
		Given the sorted rotated array nums of unique elements, return the minimum element of this array.
		You must write an algorithm that runs in O(log n) time.
		Example 1:
		Input: nums = [3,4,5,1,2]
		Output: 1
		Explanation: The original array was [1,2,3,4,5] rotated 3 times.
		Example 2:
		Input: nums = [4,5,6,7,0,1,2]
		Output: 0
		Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
		Example 3:
		Input: nums = [11,13,15,17]
		Output: 11
		Explanation: The original array was [11,13,15,17] and it was rotated 4 times. "
"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
		Implement the MinStack class:
			MinStack() initializes the stack object.
			void push(int val) pushes the element val onto the stack.
			void pop() removes the element on the top of the stack.
			int top() gets the top element of the stack.
			int getMin() retrieves the minimum element in the stack.
		You must implement a solution with O(1) time complexity for each function.
		Example 1:
		Input
		[""MinStack"",""push"",""push"",""push"",""getMin"",""pop"",""top"",""getMin""]
		[[],[-2],[0],[-3],[],[],[],[]]
		Output
		[null,null,null,null,-3,null,0,-2]
		Explanation
		MinStack minStack = new MinStack();
		minStack.push(-2);
		minStack.push(0);
		minStack.push(-3);
		minStack.getMin(); // return -3
		minStack.pop();
		minStack.top();    // return 0
		minStack.getMin(); // return -2"
"Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.
		For example, the following two linked lists begin to intersect at node c1:
		The test cases are generated such that there are no cycles anywhere in the entire linked structure.
		Note that the linked lists must retain their original structure after the function returns.
		Custom Judge:
		The inputs to the judge are given as follows (your program is not given these inputs):
			intersectVal - The value of the node where the intersection occurs. This is 0 if there is no intersected node.
			listA - The first linked list.
			listB - The second linked list.
			skipA - The number of nodes to skip ahead in listA (starting from the head) to get to the intersected node.
			skipB - The number of nodes to skip ahead in listB (starting from the head) to get to the intersected node.
		The judge will then create the linked structure based on these inputs and pass the two heads, headA and headB to your program. If you correctly return the intersected node, then your solution will be accepted.
		Example 1:
		Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
		Output: Intersected at '8'
		Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
		From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.
		- Note that the intersected node's value is not 1 because the nodes with value 1 in A and B (2nd node in A and 3rd node in B) are different node references. In other words, they point to two different locations in memory, while the nodes with value 8 in A and B (3rd node in A and 4th node in B) point to the same location in memory.
		Example 2:
		Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
		Output: Intersected at '2'
		Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
		From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.
		Example 3:
		Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
		Output: No intersection
		Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.
		Explanation: The two lists do not intersect, so return null."
"A peak element is an element that is strictly greater than its neighbors.
		Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.
		You may imagine that nums[-1] = nums[n] = -∞. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.
		You must write an algorithm that runs in O(log n) time.
		Example 1:
		Input: nums = [1,2,3,1]
		Output: 2
		Explanation: 3 is a peak element and your function should return the index number 2.
		Example 2:
		Input: nums = [1,2,1,3,5,6,4]
		Output: 5
		Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6."
"Given two version numbers, version1 and version2, compare them.
		Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.
		To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.
		Return the following:
			If version1 < version2, return -1.
			If version1 > version2, return 1.
			Otherwise, return 0.
		Example 1:
		Input: version1 = ""1.01"", version2 = ""1.001""
		Output: 0
		Explanation: Ignoring leading zeroes, both ""01"" and ""001"" represent the same integer ""1"".
		Example 2:
		Input: version1 = ""1.0"", version2 = ""1.0.0""
		Output: 0
		Explanation: version1 does not specify revision 2, which means it is treated as ""0"".
		Example 3:
		Input: version1 = ""0.1"", version2 = ""1.1""
		Output: -1
		Explanation: version1's revision 0 is ""0"", while version2's revision 0 is ""1"". 0 < 1, so version1 < version2."
"Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.
		If the fractional part is repeating, enclose the repeating part in parentheses.
		If multiple answers are possible, return any of them.
		It is guaranteed that the length of the answer string is less than 104 for all the given inputs.
		Example 1:
		Input: numerator = 1, denominator = 2
		Output: ""0.5""
		Example 2:
		Input: numerator = 2, denominator = 1
		Output: ""2""
		Example 3:
		Input: numerator = 4, denominator = 333
		Output: ""0.(012)"""
"Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.
		Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
		The tests are generated such that there is exactly one solution. You may not use the same element twice.
		Your solution must use only constant extra space.
		Example 1:
		Input: numbers = [2,7,11,15], target = 9
		Output: [1,2]
		Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
		Example 2:
		Input: numbers = [2,3,4], target = 6
		Output: [1,3]
		Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
		Example 3:
		Input: numbers = [-1,0], target = -1
		Output: [1,2]
		Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2]."
"Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.
		For example:
		A -> 1
		B -> 2
		C -> 3
		...
		Z -> 26
		AA -> 27
		AB -> 28 
		...
		Example 1:
		Input: columnNumber = 1
		Output: ""A""
		Example 2:
		Input: columnNumber = 28
		Output: ""AB""
		Example 3:
		Input: columnNumber = 701
		Output: ""ZY"""
"Given an array nums of size n, return the majority element.
		The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
		Example 1:
		Input: nums = [3,2,3]
		Output: 3
		Example 2:
		Input: nums = [2,2,1,1,1,2,2]
		Output: 2"
"Given a string columnTitle that represents the column title as appears in an Excel sheet, return its corresponding column number.
		For example:
		A -> 1
		B -> 2
		C -> 3
		...
		Z -> 26
		AA -> 27
		AB -> 28 
		...
		Example 1:
		Input: columnTitle = ""A""
		Output: 1
		Example 2:
		Input: columnTitle = ""AB""
		Output: 28
		Example 3:
		Input: columnTitle = ""ZY""
		Output: 701"
"Given an integer n, return the number of trailing zeroes in n!.
		Note that n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1.
		Example 1:
		Input: n = 3
		Output: 0
		Explanation: 3! = 6, no trailing zero.
		Example 2:
		Input: n = 5
		Output: 1
		Explanation: 5! = 120, one trailing zero.
		Example 3:
		Input: n = 0
		Output: 0"
"Implement the BSTIterator class that represents an iterator over the in-order traversal of a binary search tree (BST):
			BSTIterator(TreeNode root) Initializes an object of the BSTIterator class. The root of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.
			boolean hasNext() Returns true if there exists a number in the traversal to the right of the pointer, otherwise returns false.
			int next() Moves the pointer to the right, then returns the number at the pointer.
		Notice that by initializing the pointer to a non-existent smallest number, the first call to next() will return the smallest element in the BST.
		You may assume that next() calls will always be valid. That is, there will be at least a next number in the in-order traversal when next() is called.
		Example 1:
		Input
		[""BSTIterator"", ""next"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext""]
		[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
		Output
		[null, 3, 7, true, 9, true, 15, true, 20, false]
		Explanation
		BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
		bSTIterator.next();    // return 3
		bSTIterator.next();    // return 7
		bSTIterator.hasNext(); // return True
		bSTIterator.next();    // return 9
		bSTIterator.hasNext(); // return True
		bSTIterator.next();    // return 15
		bSTIterator.hasNext(); // return True
		bSTIterator.next();    // return 20
		bSTIterator.hasNext(); // return False"
"Given a list of non-negative integers nums, arrange them such that they form the largest number and return it.
		Since the result may be very large, so you need to return a string instead of an integer.
		Example 1:
		Input: nums = [10,2]
		Output: ""210""
		Example 2:
		Input: nums = [3,30,34,5,9]
		Output: ""9534330"""
"The DNA sequence is composed of a series of nucleotides abbreviated as 'A', 'C', 'G', and 'T'.
			For example, ""ACGAATTCCG"" is a DNA sequence.
		When studying DNA, it is useful to identify repeated sequences within the DNA.
		Given a string s that represents a DNA sequence, return all the 10-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.
		Example 1:
		Input: s = ""AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT""
		Output: [""AAAAACCCCC"",""CCCCCAAAAA""]
		Example 2:
		Input: s = ""AAAAAAAAAAAAA""
		Output: [""AAAAAAAAAA""]"
"# Medium
"
"Reverse bits of a given 32 bits unsigned integer.
		Note:
			Note that in some languages, such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
			In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer -3 and the output represents the signed integer -1073741825.
		Example 1:
		Input: n = 00000010100101000001111010011100
		Output:    964176192 (00111001011110000010100101000000)
		Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.
		Example 2:
		Input: n = 11111111111111111111111111111101
		Output:   3221225471 (10111111111111111111111111111111)
		Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111."
"Write a function that takes the binary representation of an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).
		Note:
			Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.
			In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. -3.
		Example 1:
		Input: n = 00000000000000000000000000001011
		Output: 3
		Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.
		Example 2:
		Input: n = 00000000000000000000000010000000
		Output: 1
		Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.
		Example 3:
		Input: n = 11111111111111111111111111111101
		Output: 31
		Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits."
"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
		Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
		Example 1:
		Input: nums = [1,2,3,1]
		Output: 4
		Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
		Total amount you can rob = 1 + 3 = 4.
		Example 2:
		Input: nums = [2,7,9,3,1]
		Output: 12
		Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).
		Total amount you can rob = 2 + 9 + 1 = 12."
"Given the root of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.
		Example 1:
		Input: root = [1,2,3,null,5,null,4]
		Output: [1,3,4]
		Example 2:
		Input: root = [1,null,3]
		Output: [1,3]
		Example 3:
		Input: root = []
		Output: []"
"Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.
		An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.
		Example 1:
		Input: grid = [
		  [""1"",""1"",""1"",""1"",""0""],
		  [""1"",""1"",""0"",""1"",""0""],
		  [""1"",""1"",""0"",""0"",""0""],
		  [""0"",""0"",""0"",""0"",""0""]
		]
		Output: 1
		Example 2:
		Input: grid = [
		  [""1"",""1"",""0"",""0"",""0""],
		  [""1"",""1"",""0"",""0"",""0""],
		  [""0"",""0"",""1"",""0"",""0""],
		  [""0"",""0"",""0"",""1"",""1""]
		]
		Output: 3"
"Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.
		Example 1:
		Input: left = 5, right = 7
		Output: 4
		Example 2:
		Input: left = 0, right = 0
		Output: 0
		Example 3:
		Input: left = 1, right = 2147483647
		Output: 0"
"Write an algorithm to determine if a number n is happy.
		A happy number is a number defined by the following process:
			Starting with any positive integer, replace the number by the sum of the squares of its digits.
			Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
			Those numbers for which this process ends in 1 are happy.
		Return true if n is a happy number, and false if not.
		Example 1:
		Input: n = 19
		Output: true
		Explanation:
		12 + 92 = 82
		82 + 22 = 68
		62 + 82 = 100
		12 + 02 + 02 = 1
		Example 2:
		Input: n = 2
		Output: false"
"Given the head of a linked list and an integer val, remove all the nodes of the linked list that has Node.val == val, and return the new head.
		Example 1:
		Input: head = [1,2,6,3,4,5,6], val = 6
		Output: [1,2,3,4,5]
		Example 2:
		Input: head = [], val = 1
		Output: []
		Example 3:
		Input: head = [7,7,7,7], val = 7
		Output: []"
"Given an integer n, return the number of prime numbers that are strictly less than n.
		Example 1:
		Input: n = 10
		Output: 4
		Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
		Example 2:
		Input: n = 0
		Output: 0
		Example 3:
		Input: n = 1
		Output: 0"
"Given two strings s and t, determine if they are isomorphic.
		Two strings s and t are isomorphic if the characters in s can be replaced to get t.
		All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.
		Example 1:
		Input: s = ""egg"", t = ""add""
		Output: true
		Example 2:
		Input: s = ""foo"", t = ""bar""
		Output: false
		Example 3:
		Input: s = ""paper"", t = ""title""
		Output: true"
"Given the head of a singly linked list, reverse the list, and return the reversed list.
		Example 1:
		Input: head = [1,2,3,4,5]
		Output: [5,4,3,2,1]
		Example 2:
		Input: head = [1,2]
		Output: [2,1]
		Example 3:
		Input: head = []
		Output: []"
"There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
			For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
		Return true if you can finish all courses. Otherwise, return false.
		Example 1:
		Input: numCourses = 2, prerequisites = [[1,0]]
		Output: true
		Explanation: There are a total of 2 courses to take. 
		To take course 1 you should have finished course 0. So it is possible.
		Example 2:
		Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
		Output: false
		Explanation: There are a total of 2 courses to take. 
		To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible."
"A trie (pronounced as ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.
		Implement the Trie class:
			Trie() Initializes the trie object.
			void insert(String word) Inserts the string word into the trie.
			boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
			boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.
		Example 1:
		Input
		[""Trie"", ""insert"", ""search"", ""search"", ""startsWith"", ""insert"", ""search""]
		[[], [""apple""], [""apple""], [""app""], [""app""], [""app""], [""app""]]
		Output
		[null, null, true, false, true, null, true]
		Explanation
		Trie trie = new Trie();
		trie.insert(""apple"");
		trie.search(""apple"");   // return True
		trie.search(""app"");     // return False
		trie.startsWith(""app""); // return True
		trie.insert(""app"");
		trie.search(""app"");     // return True"
"Given an array of positive integers nums and a positive integer target, return the minimal length of a subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.
		Example 1:
		Input: target = 7, nums = [2,3,1,2,4,3]
		Output: 2
		Explanation: The subarray [4,3] has the minimal length under the problem constraint.
		Example 2:
		Input: target = 4, nums = [1,4,4]
		Output: 1
		Example 3:
		Input: target = 11, nums = [1,1,1,1,1,1,1,1]
		Output: 0"
"There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
			For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
		Return the ordering of courses you should take to finish all courses. If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.
		Example 1:
		Input: numCourses = 2, prerequisites = [[1,0]]
		Output: [0,1]
		Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].
		Example 2:
		Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
		Output: [0,2,1,3]
		Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.
		So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].
		Example 3:
		Input: numCourses = 1, prerequisites = []
		Output: [0]"
"Design a data structure that supports adding new words and finding if a string matches any previously added string.
		Implement the WordDictionary class:
			WordDictionary() Initializes the object.
			void addWord(word) Adds word to the data structure, it can be matched later.
			bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
		Example:
		Input
		[""WordDictionary"",""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""]
		[[],[""bad""],[""dad""],[""mad""],[""pad""],[""bad""],["".ad""],[""b..""]]
		Output
		[null,null,null,null,false,true,true,true]
		Explanation
		WordDictionary wordDictionary = new WordDictionary();
		wordDictionary.addWord(""bad"");
		wordDictionary.addWord(""dad"");
		wordDictionary.addWord(""mad"");
		wordDictionary.search(""pad""); // return False
		wordDictionary.search(""bad""); // return True
		wordDictionary.search("".ad""); // return True
		wordDictionary.search(""b..""); // return True"
"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.
		Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.
		Example 1:
		Input: nums = [2,3,2]
		Output: 3
		Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.
		Example 2:
		Input: nums = [1,2,3,1]
		Output: 4
		Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
		Total amount you can rob = 1 + 3 = 4.
		Example 3:
		Input: nums = [1,2,3]
		Output: 3"
"Given an integer array nums and an integer k, return the kth largest element in the array.
		Note that it is the kth largest element in the sorted order, not the kth distinct element.
		You must solve it in O(n) time complexity.
		Example 1:
		Input: nums = [3,2,1,5,6,4], k = 2
		Output: 5
		Example 2:
		Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
		Output: 4"
"Find all valid combinations of k numbers that sum up to n such that the following conditions are true:
			Only numbers 1 through 9 are used.
			Each number is used at most once.
		Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.
		Example 1:
		Input: k = 3, n = 7
		Output: [[1,2,4]]
		Explanation:
		1 + 2 + 4 = 7
		There are no other valid combinations.
		Example 2:
		Input: k = 3, n = 9
		Output: [[1,2,6],[1,3,5],[2,3,4]]
		Explanation:
		1 + 2 + 6 = 9
		1 + 3 + 5 = 9
		2 + 3 + 4 = 9
		There are no other valid combinations.
		Example 3:
		Input: k = 4, n = 1
		Output: []
		Explanation: There are no valid combinations.
		Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination."
"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
		Example 1:
		Input: nums = [1,2,3,1]
		Output: true
		Example 2:
		Input: nums = [1,2,3,4]
		Output: false
		Example 3:
		Input: nums = [1,1,1,3,3,4,3,2,4,2]
		Output: true"
"Given an integer array nums and an integer k, return true if there are two distinct indices i and j in the array such that nums[i] == nums[j] and abs(i - j) <= k.
		Example 1:
		Input: nums = [1,2,3,1], k = 3
		Output: true
		Example 2:
		Input: nums = [1,0,1,1], k = 1
		Output: true
		Example 3:
		Input: nums = [1,2,3,1,2,3], k = 2
		Output: false"
"Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.
		Example 1:
		Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
		Output: 4
		Example 2:
		Input: matrix = [[""0"",""1""],[""1"",""0""]]
		Output: 1
		Example 3:
		Input: matrix = [[""0""]]
		Output: 0"
"Given the root of a complete binary tree, return the number of the nodes in the tree.
		According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
		Design an algorithm that runs in less than O(n) time complexity.
		Example 1:
		Input: root = [1,2,3,4,5,6]
		Output: 6
		Example 2:
		Input: root = []
		Output: 0
		Example 3:
		Input: root = [1]
		Output: 1"
"Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.
		The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2).
		The second rectangle is defined by its bottom-left corner (bx1, by1) and its top-right corner (bx2, by2).
		Example 1:
		Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2
		Output: 45
		Example 2:
		Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2
		Output: 16"
"Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).
		Implement the MyStack class:
			void push(int x) Pushes element x to the top of the stack.
			int pop() Removes the element on the top of the stack and returns it.
			int top() Returns the element on the top of the stack.
			boolean empty() Returns true if the stack is empty, false otherwise.
		Notes:
			You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
			Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
		Example 1:
		Input
		[""MyStack"", ""push"", ""push"", ""top"", ""pop"", ""empty""]
		[[], [1], [2], [], [], []]
		Output
		[null, null, null, 2, 2, false]
		Explanation
		MyStack myStack = new MyStack();
		myStack.push(1);
		myStack.push(2);
		myStack.top(); // return 2
		myStack.pop(); // return 2
		myStack.empty(); // return False"
"Given a string s which represents an expression, evaluate this expression and return its value. 
		The integer division should truncate toward zero.
		You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].
		Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().
		Example 1:
		Input: s = ""3+2*2""
		Output: 7
		Example 2:
		Input: s = "" 3/2 ""
		Output: 1
		Example 3:
		Input: s = "" 3+5 / 2 ""
		Output: 5"
"You are given a sorted unique integer array nums.
		A range [a,b] is the set of all integers from a to b (inclusive).
		Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.
		Each range [a,b] in the list should be output as:
			""a->b"" if a != b
			""a"" if a == b
		Example 1:
		Input: nums = [0,1,2,4,5,7]
		Output: [""0->2"",""4->5"",""7""]
		Explanation: The ranges are:
		[0,2] --> ""0->2""
		[4,5] --> ""4->5""
		[7,7] --> ""7""
		Example 2:
		Input: nums = [0,2,3,4,6,8,9]
		Output: [""0"",""2->4"",""6"",""8->9""]
		Explanation: The ranges are:
		[0,0] --> ""0""
		[2,4] --> ""2->4""
		[6,6] --> ""6""
		[8,9] --> ""8->9"""
"Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
		Example 1:
		Input: nums = [3,2,3]
		Output: [3]
		Example 2:
		Input: nums = [1]
		Output: [1]
		Example 3:
		Input: nums = [1,2]
		Output: [1,2]"
"Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.
		Example 1:
		Input: root = [3,1,4,null,2], k = 1
		Output: 1
		Example 2:
		Input: root = [5,3,6,2,4,null,null,1], k = 3
		Output: 3"
"Given an integer n, return true if it is a power of two. Otherwise, return false.
		An integer n is a power of two, if there exists an integer x such that n == 2x.
		Example 1:
		Input: n = 1
		Output: true
		Explanation: 20 = 1
		Example 2:
		Input: n = 16
		Output: true
		Explanation: 24 = 16
		Example 3:
		Input: n = 3
		Output: false"
"Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (push, peek, pop, and empty).
		Implement the MyQueue class:
			void push(int x) Pushes element x to the back of the queue.
			int pop() Removes the element from the front of the queue and returns it.
			int peek() Returns the element at the front of the queue.
			boolean empty() Returns true if the queue is empty, false otherwise.
		Notes:
			You must use only standard operations of a stack, which means only push to top, peek/pop from top, size, and is empty operations are valid.
			Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.
		Example 1:
		Input
		[""MyQueue"", ""push"", ""push"", ""peek"", ""pop"", ""empty""]
		[[], [1], [2], [], [], []]
		Output
		[null, null, null, 1, 1, false]
		Explanation
		MyQueue myQueue = new MyQueue();
		myQueue.push(1); // queue is: [1]
		myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
		myQueue.peek(); // return 1
		myQueue.pop(); // return 1, queue is [2]
		myQueue.empty(); // return false"
"Given the head of a singly linked list, return true if it is a palindrome or false otherwise.
		Example 1:
		Input: head = [1,2,2,1]
		Output: true
		Example 2:
		Input: head = [1,2]
		Output: false"
"Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
		According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
		Example 1:
		Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
		Output: 6
		Explanation: The LCA of nodes 2 and 8 is 6.
		Example 2:
		Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
		Output: 2
		Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.
		Example 3:
		Input: root = [2,1], p = 2, q = 1
		Output: 2"
"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.
		According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).”
		Example 1:
		Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
		Output: 3
		Explanation: The LCA of nodes 5 and 1 is 3.
		Example 2:
		Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
		Output: 5
		Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.
		Example 3:
		Input: root = [1,2], p = 1, q = 2
		Output: 1"
"# Medium
"
"Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
		The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
		You must write an algorithm that runs in O(n) time and without using the division operation.
		Example 1:
		Input: nums = [1,2,3,4]
		Output: [24,12,8,6]
		Example 2:
		Input: nums = [-1,1,0,-3,3]
		Output: [0,0,9,0,0]"
"Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:
			Integers in each row are sorted in ascending from left to right.
			Integers in each column are sorted in ascending from top to bottom.
		Example 1:
		Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
		Output: true
		Example 2:
		Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
		Output: false"
"Given a string expression of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.
		The test cases are generated such that the output values fit in a 32-bit integer and the number of different results does not exceed 104.
		Example 1:
		Input: expression = ""2-1-1""
		Output: [0,2]
		Explanation:
		((2-1)-1) = 0 
		(2-(1-1)) = 2
		Example 2:
		Input: expression = ""2*3-4*5""
		Output: [-34,-14,-10,-10,10]
		Explanation:
		(2*(3-(4*5))) = -34 
		((2*3)-(4*5)) = -14 
		((2*(3-4))*5) = -10 
		(2*((3-4)*5)) = -10 
		(((2*3)-4)*5) = 10"
"Given two strings s and t, return true if t is an anagram of s, and false otherwise.
		An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
		Example 1:
		Input: s = ""anagram"", t = ""nagaram""
		Output: true
		Example 2:
		Input: s = ""rat"", t = ""car""
		Output: false"
"Given the root of a binary tree, return all root-to-leaf paths in any order.
		A leaf is a node with no children.
		Example 1:
		Input: root = [1,2,3,null,5]
		Output: [""1->2->5"",""1->3""]
		Example 2:
		Input: root = [1]
		Output: [""1""]"
"Given an integer num, repeatedly add all its digits until the result has only one digit, and return it.
		Example 1:
		Input: num = 38
		Output: 2
		Explanation: The process is
		38 --> 3 + 8 --> 11
		11 --> 1 + 1 --> 2 
		Since 2 has only one digit, return it.
		Example 2:
		Input: num = 0
		Output: 0"
"Given an integer array nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.
		You must write an algorithm that runs in linear runtime complexity and uses only constant extra space.
		Example 1:
		Input: nums = [1,2,1,3,2,5]
		Output: [3,5]
		Explanation:  [5, 3] is also a valid answer.
		Example 2:
		Input: nums = [-1,0]
		Output: [-1,0]
		Example 3:
		Input: nums = [0,1]
		Output: [1,0]"
"An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
		Given an integer n, return true if n is an ugly number.
		Example 1:
		Input: n = 6
		Output: true
		Explanation: 6 = 2 × 3
		Example 2:
		Input: n = 1
		Output: true
		Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.
		Example 3:
		Input: n = 14
		Output: false
		Explanation: 14 is not ugly since it includes the prime factor 7."
"An ugly number is a positive integer whose prime factors are limited to 2, 3, and 5.
		Given an integer n, return the nth ugly number.
		Example 1:
		Input: n = 10
		Output: 12
		Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.
		Example 2:
		Input: n = 1
		Output: 1
		Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5."
"Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.
		Example 1:
		Input: nums = [3,0,1]
		Output: 2
		Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.
		Example 2:
		Input: nums = [0,1]
		Output: 2
		Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.
		Example 3:
		Input: nums = [9,6,4,2,3,5,7,0,1]
		Output: 8
		Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums."
"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper, return compute the researcher's h-index.
		According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.
		If there are several possible values for h, the maximum one is taken as the h-index.
		Example 1:
		Input: citations = [3,0,6,1,5]
		Output: 3
		Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.
		Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.
		Example 2:
		Input: citations = [1,3,1]
		Output: 1"
"Given an array of integers citations where citations[i] is the number of citations a researcher received for their ith paper and citations is sorted in an ascending order, return compute the researcher's h-index.
		According to the definition of h-index on Wikipedia: A scientist has an index h if h of their n papers have at least h citations each, and the other n − h papers have no more than h citations each.
		If there are several possible values for h, the maximum one is taken as the h-index.
		You must write an algorithm that runs in logarithmic time.
		Example 1:
		Input: citations = [0,1,3,5,6]
		Output: 3
		Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.
		Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.
		Example 2:
		Input: citations = [1,2,100]
		Output: 2"
"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.
		Suppose you have n versions [1, 2, ..., n] and you want to find out the first bad one, which causes all the following ones to be bad.
		You are given an API bool isBadVersion(version) which returns whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.
		Example 1:
		Input: n = 5, bad = 4
		Output: 4
		Explanation:
		call isBadVersion(3) -> false
		call isBadVersion(5) -> true
		call isBadVersion(4) -> true
		Then 4 is the first bad version.
		Example 2:
		Input: n = 1, bad = 1
		Output: 1"
"Given an integer n, return the least number of perfect square numbers that sum to n.
		A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.
		Example 1:
		Input: n = 12
		Output: 3
		Explanation: 12 = 4 + 4 + 4.
		Example 2:
		Input: n = 13
		Output: 2
		Explanation: 13 = 4 + 9."
"# Easy
"
"Design an iterator that supports the peek operation on an existing iterator in addition to the hasNext and the next operations.
		Implement the PeekingIterator class:
			PeekingIterator(Iterator<int> nums) Initializes the object with the given integer iterator iterator.
			int next() Returns the next element in the array and moves the pointer to the next element.
			boolean hasNext() Returns true if there are still elements in the array.
			int peek() Returns the next element in the array without moving the pointer.
		Note: Each language may have a different implementation of the constructor and Iterator, but they all support the int next() and boolean hasNext() functions.
		Example 1:
		Input
		[""PeekingIterator"", ""next"", ""peek"", ""next"", ""next"", ""hasNext""]
		[[[1, 2, 3]], [], [], [], [], []]
		Output
		[null, 1, 2, 2, 3, false]
		Explanation
		PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]
		peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].
		peekingIterator.peek();    // return 2, the pointer does not move [1,2,3].
		peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]
		peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]
		peekingIterator.hasNext(); // return False"
"Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
		There is only one repeated number in nums, return this repeated number.
		You must solve the problem without modifying the array nums and uses only constant extra space.
		Example 1:
		Input: nums = [1,3,4,2,2]
		Output: 2
		Example 2:
		Input: nums = [3,1,3,4,2]
		Output: 3"
"# Medium
"
"Given a pattern and a string s, find if s follows the same pattern.
		Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.
		Example 1:
		Input: pattern = ""abba"", s = ""dog cat cat dog""
		Output: true
		Example 2:
		Input: pattern = ""abba"", s = ""dog cat cat fish""
		Output: false
		Example 3:
		Input: pattern = ""aaaa"", s = ""dog cat cat dog""
		Output: false"
"You are playing the following Nim Game with your friend:
			Initially, there is a heap of stones on the table.
			You and your friend will alternate taking turns, and you go first.
			On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.
			The one who removes the last stone is the winner.
		Given n, the number of stones in the heap, return true if you can win the game assuming both you and your friend play optimally, otherwise return false.
		Example 1:
		Input: n = 4
		Output: false
		Explanation: These are the possible outcomes:
		1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.
		2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.
		3. You remove 3 stones. Your friend removes the last stone. Your friend wins.
		In all outcomes, your friend wins.
		Example 2:
		Input: n = 1
		Output: true
		Example 3:
		Input: n = 2
		Output: true"
"You are playing the Bulls and Cows game with your friend.
		You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:
			The number of ""bulls"", which are digits in the guess that are in the correct position.
			The number of ""cows"", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.
		Given the secret number secret and your friend's guess guess, return the hint for your friend's guess.
		The hint should be formatted as ""xAyB"", where x is the number of bulls and y is the number of cows. Note that both secret and guess may contain duplicate digits.
		Example 1:
		Input: secret = ""1807"", guess = ""7810""
		Output: ""1A3B""
		Explanation: Bulls are connected with a '|' and cows are underlined:
		""1807""
		  |
		""7810""
		Example 2:
		Input: secret = ""1123"", guess = ""0111""
		Output: ""1A1B""
		Explanation: Bulls are connected with a '|' and cows are underlined:
		""1123""        ""1123""
		  |      or     |
		""0111""        ""0111""
		Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull."
"Given an integer array nums, return the length of the longest strictly increasing subsequence.
		Example 1:
		Input: nums = [10,9,2,5,3,7,101,18]
		Output: 4
		Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.
		Example 2:
		Input: nums = [0,1,0,3,2,3]
		Output: 4
		Example 3:
		Input: nums = [7,7,7,7,7,7,7]
		Output: 1"
"Given an integer array nums, handle multiple queries of the following type:
			Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
		Implement the NumArray class:
			NumArray(int[] nums) Initializes the object with the integer array nums.
			int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
		Example 1:
		Input
		[""NumArray"", ""sumRange"", ""sumRange"", ""sumRange""]
		[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
		Output
		[null, 1, -1, -3]
		Explanation
		NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
		numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
		numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
		numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3"
"Given a 2D matrix matrix, handle multiple queries of the following type:
			Calculate the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
		Implement the NumMatrix class:
			NumMatrix(int[][] matrix) Initializes the object with the integer matrix matrix.
			int sumRegion(int row1, int col1, int row2, int col2) Returns the sum of the elements of matrix inside the rectangle defined by its upper left corner (row1, col1) and lower right corner (row2, col2).
		You must design an algorithm where sumRegion works on O(1) time complexity.
		Example 1:
		Input
		[""NumMatrix"", ""sumRegion"", ""sumRegion"", ""sumRegion""]
		[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
		Output
		[null, 8, 11, 12]
		Explanation
		NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
		numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)
		numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)
		numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)"
"An additive number is a string whose digits can form an additive sequence.
		A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.
		Given a string containing only digits, return true if it is an additive number or false otherwise.
		Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.
		Example 1:
		Input: ""112358""
		Output: true
		Explanation: 
		The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
		1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
		Example 2:
		Input: ""199100199""
		Output: true
		Explanation: 
		The additive sequence is: 1, 99, 100, 199. 
		1 + 99 = 100, 99 + 100 = 199"
"Given an integer array nums, handle multiple queries of the following types:
			Update the value of an element in nums.
			Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
		Implement the NumArray class:
			NumArray(int[] nums) Initializes the object with the integer array nums.
			void update(int index, int val) Updates the value of nums[index] to be val.
			int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).
		Example 1:
		Input
		[""NumArray"", ""sumRange"", ""update"", ""sumRange""]
		[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
		Output
		[null, 9, null, 8]
		Explanation
		NumArray numArray = new NumArray([1, 3, 5]);
		numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
		numArray.update(1, 2);   // nums = [1, 2, 5]
		numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8"
"You are given an array prices where prices[i] is the price of a given stock on the ith day.
		Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:
			After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).
		Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).
		Example 1:
		Input: prices = [1,2,3,0,2]
		Output: 3
		Explanation: transactions = [buy, sell, cooldown, buy, sell]
		Example 2:
		Input: prices = [1]
		Output: 0"
"A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.
		Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).
		Return a list of all MHTs' root labels. You can return the answer in any order.
		The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.
		Example 1:
		Input: n = 4, edges = [[1,0],[1,2],[1,3]]
		Output: [1]
		Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.
		Example 2:
		Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
		Output: [3,4]"
"A super ugly number is a positive integer whose prime factors are in the array primes.
		Given an integer n and an array of integers primes, return the nth super ugly number.
		The nth super ugly number is guaranteed to fit in a 32-bit signed integer.
		Example 1:
		Input: n = 12, primes = [2,7,13,19]
		Output: 32
		Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].
		Example 2:
		Input: n = 1, primes = [2,3,5]
		Output: 1
		Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5]."
"Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.
		Example 1:
		Input: s = ""bcabc""
		Output: ""abc""
		Example 2:
		Input: s = ""cbacdcbc""
		Output: ""acdb"""
"Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. If no such two words exist, return 0.
		Example 1:
		Input: words = [""abcw"",""baz"",""foo"",""bar"",""xtfn"",""abcdef""]
		Output: 16
		Explanation: The two words can be ""abcw"", ""xtfn"".
		Example 2:
		Input: words = [""a"",""ab"",""abc"",""d"",""cd"",""bcd"",""abcd""]
		Output: 4
		Explanation: The two words can be ""ab"", ""cd"".
		Example 3:
		Input: words = [""a"",""aa"",""aaa"",""aaaa""]
		Output: 0
		Explanation: No such pair of words."
"There are n bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.
		On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb.
		Return the number of bulbs that are on after n rounds.
		Example 1:
		Input: n = 3
		Output: 1
		Explanation: At first, the three bulbs are [off, off, off].
		After the first round, the three bulbs are [on, on, on].
		After the second round, the three bulbs are [on, off, on].
		After the third round, the three bulbs are [on, off, off]. 
		So you should return 1 because there is only one bulb is on.
		Example 2:
		Input: n = 0
		Output: 0
		Example 3:
		Input: n = 1
		Output: 1"
"You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
		Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.
		You may assume that you have an infinite number of each kind of coin.
		Example 1:
		Input: coins = [1,2,5], amount = 11
		Output: 3
		Explanation: 11 = 5 + 5 + 1
		Example 2:
		Input: coins = [2], amount = 3
		Output: -1
		Example 3:
		Input: coins = [1], amount = 0
		Output: 0"
"# Medium
"
"Given an integer n, return true if it is a power of three. Otherwise, return false.
		An integer n is a power of three, if there exists an integer x such that n == 3x.
		Example 1:
		Input: n = 27
		Output: true
		Explanation: 27 = 33
		Example 2:
		Input: n = 0
		Output: false
		Explanation: There is no x where 3x = 0.
		Example 3:
		Input: n = -1
		Output: false
		Explanation: There is no x where 3x = (-1)."
"Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.
		The first node is considered odd, and the second node is even, and so on.
		Note that the relative order inside both the even and odd groups should remain as it was in the input.
		You must solve the problem in O(1) extra space complexity and O(n) time complexity.
		Example 1:
		Input: head = [1,2,3,4,5]
		Output: [1,3,5,2,4]
		Example 2:
		Input: head = [2,1,3,5,6,4,7]
		Output: [2,3,6,7,1,5,4]"
"One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as '#'.
		For example, the above binary tree can be serialized to the string ""9,3,4,#,#,1,#,#,2,#,6,#,#"", where '#' represents a null node.
		Given a string of comma-separated values preorder, return true if it is a correct preorder traversal serialization of a binary tree.
		It is guaranteed that each comma-separated value in the string must be either an integer or a character '#' representing null pointer.
		You may assume that the input format is always valid.
			For example, it could never contain two consecutive commas, such as ""1,,3"".
		Note: You are not allowed to reconstruct the tree.
		Example 1:
		Input: preorder = ""9,3,4,#,#,1,#,#,2,#,6,#,#""
		Output: true
		Example 2:
		Input: preorder = ""1,#""
		Output: false
		Example 3:
		Input: preorder = ""9,#,#,1""
		Output: false"
"Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.
		Example 1:
		Input: nums = [1,2,3,4,5]
		Output: true
		Explanation: Any triplet where i < j < k is valid.
		Example 2:
		Input: nums = [5,4,3,2,1]
		Output: false
		Explanation: No triplet exists.
		Example 3:
		Input: nums = [2,1,5,0,4,6]
		Output: true
		Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6."
"The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.
		Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.
		Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.
		Example 1:
		Input: root = [3,2,3,null,3,null,1]
		Output: 7
		Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.
		Example 2:
		Input: root = [3,4,5,1,3,null,1]
		Output: 9
		Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9."
"Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.
		Example 1:
		Input: n = 2
		Output: [0,1,1]
		Explanation:
		0 --> 0
		1 --> 1
		2 --> 10
		Example 2:
		Input: n = 5
		Output: [0,1,1,2,1,2]
		Explanation:
		0 --> 0
		1 --> 1
		2 --> 10
		3 --> 11
		4 --> 100
		5 --> 101"
"You are given a nested list of integers nestedList. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.
		Implement the NestedIterator class:
			NestedIterator(List<NestedInteger> nestedList) Initializes the iterator with the nested list nestedList.
			int next() Returns the next integer in the nested list.
			boolean hasNext() Returns true if there are still some integers in the nested list and false otherwise.
		Your code will be tested with the following pseudocode:
		initialize iterator with nestedList
		res = []
		while iterator.hasNext()
		    append iterator.next() to the end of res
		return res
		If res matches the expected flattened list, then your code will be judged as correct.
		Example 1:
		Input: nestedList = [[1,1],2,[1,1]]
		Output: [1,1,2,1,1]
		Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].
		Example 2:
		Input: nestedList = [1,[4,[6]]]
		Output: [1,4,6]
		Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6]."
"Given an integer n, return true if it is a power of four. Otherwise, return false.
		An integer n is a power of four, if there exists an integer x such that n == 4x.
		Example 1:
		Input: n = 16
		Output: true
		Example 2:
		Input: n = 5
		Output: false
		Example 3:
		Input: n = 1
		Output: true"
"Given an integer n, break it into the sum of k positive integers, where k >= 2, and maximize the product of those integers.
		Return the maximum product you can get.
		Example 1:
		Input: n = 2
		Output: 1
		Explanation: 2 = 1 + 1, 1 × 1 = 1.
		Example 2:
		Input: n = 10
		Output: 36
		Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36."
"# Easy
"
"Given a string s, reverse only all the vowels in the string and return it.
		The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.
		Example 1:
		Input: s = ""hello""
		Output: ""holle""
		Example 2:
		Input: s = ""leetcode""
		Output: ""leotcede"""
"Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.
		Example 1:
		Input: nums = [1,1,1,2,2,3], k = 2
		Output: [1,2]
		Example 2:
		Input: nums = [1], k = 1
		Output: [1]"
"Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.
		Example 1:
		Input: nums1 = [1,2,2,1], nums2 = [2,2]
		Output: [2]
		Example 2:
		Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
		Output: [9,4]
		Explanation: [4,9] is also accepted."
"Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.
		Example 1:
		Input: nums1 = [1,2,2,1], nums2 = [2,2]
		Output: [2,2]
		Example 2:
		Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
		Output: [4,9]
		Explanation: [9,4] is also accepted."
"Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.
		Implement the Twitter class:
			Twitter() Initializes your twitter object.
			void postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.
			List<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.
			void follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.
			void unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.
		Example 1:
		Input
		[""Twitter"", ""postTweet"", ""getNewsFeed"", ""follow"", ""postTweet"", ""getNewsFeed"", ""unfollow"", ""getNewsFeed""]
		[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
		Output
		[null, null, [5], null, null, [6, 5], null, [5]]
		Explanation
		Twitter twitter = new Twitter();
		twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).
		twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
		twitter.follow(1, 2);    // User 1 follows user 2.
		twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).
		twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.
		twitter.unfollow(1, 2);  // User 1 unfollows user 2.
		twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."
"Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.
		Example 1:
		Input: n = 2
		Output: 91
		Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99
		Example 2:
		Input: n = 0
		Output: 1"
"You are given two jugs with capacities jug1Capacity and jug2Capacity liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly targetCapacity liters using these two jugs.
		If targetCapacity liters of water are measurable, you must have targetCapacity liters of water contained within one or both buckets by the end.
		Operations allowed:
			Fill any of the jugs with water.
			Empty any of the jugs.
			Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.
		Example 1:
		Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4
		Output: true
		Explanation: The famous Die Hard example 
		Example 2:
		Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5
		Output: false
		Example 3:
		Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3
		Output: true"
"Given a positive integer num, return true if num is a perfect square or false otherwise.
		A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.
		You must not use any built-in library function, such as sqrt.
		Example 1:
		Input: num = 16
		Output: true
		Explanation: We return true because 4 * 4 = 16 and 4 is an integer.
		Example 2:
		Input: num = 14
		Output: false
		Explanation: We return false because 3.742 * 3.742 = 14 and 3.742 is not an integer."
"Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
			answer[i] % answer[j] == 0, or
			answer[j] % answer[i] == 0
		If there are multiple solutions, return any of them.
		Example 1:
		Input: nums = [1,2,3]
		Output: [1,2]
		Explanation: [1,3] is also accepted.
		Example 2:
		Input: nums = [1,2,4,8]
		Output: [1,2,4,8]"
"Given two integers a and b, return the sum of the two integers without using the operators + and -.
		Example 1:
		Input: a = 1, b = 2
		Output: 3
		Example 2:
		Input: a = 2, b = 3
		Output: 5"
"Your task is to calculate ab mod 1337 where a is a positive integer and b is an extremely large positive integer given in the form of an array.
		Example 1:
		Input: a = 2, b = [3]
		Output: 8
		Example 2:
		Input: a = 2, b = [1,0]
		Output: 1024
		Example 3:
		Input: a = 1, b = [4,3,3,8,5,2]
		Output: 1"
"You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.
		Define a pair (u, v) which consists of one element from the first array and one element from the second array.
		Return the k pairs (u1, v1), (u2, v2), ..., (uk, vk) with the smallest sums.
		Example 1:
		Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
		Output: [[1,2],[1,4],[1,6]]
		Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]
		Example 2:
		Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
		Output: [[1,1],[1,1]]
		Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]
		Example 3:
		Input: nums1 = [1,2], nums2 = [3], k = 3
		Output: [[1,3],[2,3]]
		Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]"
"We are playing the Guess Game. The game is as follows:
		I pick a number from 1 to n. You have to guess which number I picked.
		Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.
		You call a pre-defined API int guess(int num), which returns three possible results:
			-1: Your guess is higher than the number I picked (i.e. num > pick).
			1: Your guess is lower than the number I picked (i.e. num < pick).
			0: your guess is equal to the number I picked (i.e. num == pick).
		Return the number that I picked.
		Example 1:
		Input: n = 10, pick = 6
		Output: 6
		Example 2:
		Input: n = 1, pick = 1
		Output: 1
		Example 3:
		Input: n = 2, pick = 1
		Output: 1"
"We are playing the Guessing Game. The game will work as follows:
			I pick a number between 1 and n.
			You guess a number.
			If you guess the right number, you win the game.
			If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.
			Every time you guess a wrong number x, you will pay x dollars. If you run out of money, you lose the game.
		Given a particular n, return the minimum amount of money you need to guarantee a win regardless of what number I pick.
		Example 1:
		Input: n = 10
		Output: 16
		Explanation: The winning strategy is as follows:
		- The range is [1,10]. Guess 7.
		    - If this is my number, your total is $0. Otherwise, you pay $7.
		    - If my number is higher, the range is [8,10]. Guess 9.
		        - If this is my number, your total is $7. Otherwise, you pay $9.
		        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.
		        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.
		    - If my number is lower, the range is [1,6]. Guess 3.
		        - If this is my number, your total is $7. Otherwise, you pay $3.
		        - If my number is higher, the range is [4,6]. Guess 5.
		            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.
		            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.
		            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.
		        - If my number is lower, the range is [1,2]. Guess 1.
		            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.
		            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.
		The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.
		Example 2:
		Input: n = 1
		Output: 0
		Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.
		Example 3:
		Input: n = 2
		Output: 1
		Explanation: There are two possible numbers, 1 and 2.
		- Guess 1.
		    - If this is my number, your total is $0. Otherwise, you pay $1.
		    - If my number is higher, it must be 2. Guess 2. Your total is $1.
		The worst case is that you pay $1."
"A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.
			For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.
			In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.
		A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.
		Given an integer array nums, return the length of the longest wiggle subsequence of nums.
		Example 1:
		Input: nums = [1,7,4,9,2,5]
		Output: 6
		Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).
		Example 2:
		Input: nums = [1,17,5,10,13,15,10,5,16,8]
		Output: 7
		Explanation: There are several subsequences that achieve this length.
		One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).
		Example 3:
		Input: nums = [1,2,3,4,5,6,7,8,9]
		Output: 2"
"Given an array of distinct integers nums and a target integer target, return the number of possible combinations that add up to target.
		The test cases are generated so that the answer can fit in a 32-bit integer.
		Example 1:
		Input: nums = [1,2,3], target = 4
		Output: 7
		Explanation:
		The possible combination ways are:
		(1, 1, 1, 1)
		(1, 1, 2)
		(1, 2, 1)
		(1, 3)
		(2, 1, 1)
		(2, 2)
		(3, 1)
		Note that different sequences are counted as different combinations.
		Example 2:
		Input: nums = [9], target = 3
		Output: 0"
"Given an n x n matrix where each of the rows and columns is sorted in ascending order, return the kth smallest element in the matrix.
		Note that it is the kth smallest element in the sorted order, not the kth distinct element.
		You must find a solution with a memory complexity better than O(n2).
		Example 1:
		Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
		Output: 13
		Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13
		Example 2:
		Input: matrix = [[-5]], k = 1
		Output: -5"
"Implement the RandomizedSet class:
			RandomizedSet() Initializes the RandomizedSet object.
			bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.
			bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.
			int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.
		You must implement the functions of the class such that each function works in average O(1) time complexity.
		Example 1:
		Input
		[""RandomizedSet"", ""insert"", ""remove"", ""insert"", ""getRandom"", ""remove"", ""insert"", ""getRandom""]
		[[], [1], [2], [2], [], [1], [2], []]
		Output
		[null, true, false, true, 2, true, false, 2]
		Explanation
		RandomizedSet randomizedSet = new RandomizedSet();
		randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.
		randomizedSet.remove(2); // Returns false as 2 does not exist in the set.
		randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].
		randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.
		randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].
		randomizedSet.insert(2); // 2 was already in the set, so return false.
		randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2."
"Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.
		Implement the Solution class:
			Solution(ListNode head) Initializes the object with the head of the singly-linked list head.
			int getRandom() Chooses a node randomly from the list and returns its value. All the nodes of the list should be equally likely to be chosen.
		Example 1:
		Input
		[""Solution"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom""]
		[[[1, 2, 3]], [], [], [], [], []]
		Output
		[null, 1, 3, 2, 2, 3]
		Explanation
		Solution solution = new Solution([1, 2, 3]);
		solution.getRandom(); // return 1
		solution.getRandom(); // return 3
		solution.getRandom(); // return 2
		solution.getRandom(); // return 2
		solution.getRandom(); // return 3
		// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning."
"Given two strings ransomNote and magazine, return true if ransomNote can be constructed by using the letters from magazine and false otherwise.
		Each letter in magazine can only be used once in ransomNote.
		Example 1:
		Input: ransomNote = ""a"", magazine = ""b""
		Output: false
		Example 2:
		Input: ransomNote = ""aa"", magazine = ""ab""
		Output: false
		Example 3:
		Input: ransomNote = ""aa"", magazine = ""aab""
		Output: true"
"Given an integer array nums, design an algorithm to randomly shuffle the array. All permutations of the array should be equally likely as a result of the shuffling.
		Implement the Solution class:
			Solution(int[] nums) Initializes the object with the integer array nums.
			int[] reset() Resets the array to its original configuration and returns it.
			int[] shuffle() Returns a random shuffling of the array.
		Example 1:
		Input
		[""Solution"", ""shuffle"", ""reset"", ""shuffle""]
		[[[1, 2, 3]], [], [], []]
		Output
		[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]
		Explanation
		Solution solution = new Solution([1, 2, 3]);
		solution.shuffle();    // Shuffle the array [1,2,3] and return its result.
		                       // Any permutation of [1,2,3] must be equally likely to be returned.
		                       // Example: return [3, 1, 2]
		solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]
		solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]"
"Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized NestedInteger.
		Each element is either an integer or a list whose elements may also be integers or other lists.
		Example 1:
		Input: s = ""324""
		Output: 324
		Explanation: You should return a NestedInteger object which contains a single integer 324.
		Example 2:
		Input: s = ""[123,[456,[789]]]""
		Output: [123,[456,[789]]]
		Explanation: Return a NestedInteger object containing a nested list with 2 elements:
		1. An integer containing value 123.
		2. A nested list containing two elements:
		    i.  An integer containing value 456.
		    ii. A nested list with one element:
		         a. An integer containing value 789"
"Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.
		You must write an algorithm that runs in O(n) time and uses O(1) extra space. 
		Example 1:
		Input: n = 13
		Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]
		Example 2:
		Input: n = 2
		Output: [1,2]"
"Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.
		Example 1:
		Input: s = ""leetcode""
		Output: 0
		Example 2:
		Input: s = ""loveleetcode""
		Output: 2
		Example 3:
		Input: s = ""aabb""
		Output: -1"
"Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:
		Here, we have dir as the only directory in the root. dir contains two subdirectories, subdir1 and subdir2. subdir1 contains a file file1.ext and subdirectory subsubdir1. subdir2 contains a subdirectory subsubdir2, which contains a file file2.ext.
		In text form, it looks like this (with ⟶ representing the tab character):
		dir
		⟶ subdir1
		⟶ ⟶ file1.ext
		⟶ ⟶ subsubdir1
		⟶ subdir2
		⟶ ⟶ subsubdir2
		⟶ ⟶ ⟶ file2.ext
		If we were to write this representation in code, it will look like this: ""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"". Note that the '\n' and '\t' are the new-line and tab characters.
		Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by '/'s. Using the above example, the absolute path to file2.ext is ""dir/subdir2/subsubdir2/file2.ext"". Each directory name consists of letters, digits, and/or spaces. Each file name is of the form name.extension, where name and extension consist of letters, digits, and/or spaces.
		Given a string input representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return 0.
		Note that the testcases are generated such that the file system is valid and no file or directory name has length 0.
		Example 1:
		Input: input = ""dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext""
		Output: 20
		Explanation: We have only one file, and the absolute path is ""dir/subdir2/file.ext"" of length 20.
		Example 2:
		Input: input = ""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext""
		Output: 32
		Explanation: We have two files:
		""dir/subdir1/file1.ext"" of length 21
		""dir/subdir2/subsubdir2/file2.ext"" of length 32.
		We return 32 since it is the longest absolute path to a file.
		Example 3:
		Input: input = ""a""
		Output: 0
		Explanation: We do not have any files, just a single directory named ""a""."
"You are given two strings s and t.
		String t is generated by random shuffling string s and then add one more letter at a random position.
		Return the letter that was added to t.
		Example 1:
		Input: s = ""abcd"", t = ""abcde""
		Output: ""e""
		Explanation: 'e' is the letter that was added.
		Example 2:
		Input: s = """", t = ""y""
		Output: ""y"""
"Given two strings s and t, return true if s is a subsequence of t, or false otherwise.
		A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., ""ace"" is a subsequence of ""abcde"" while ""aec"" is not).
		Example 1:
		Input: s = ""abc"", t = ""ahbgdc""
		Output: true
		Example 2:
		Input: s = ""axc"", t = ""ahbgdc""
		Output: false"
"Given an integer array data representing the data, return whether it is a valid UTF-8 encoding (i.e. it translates to a sequence of valid UTF-8 encoded characters).
		A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:
			For a 1-byte character, the first bit is a 0, followed by its Unicode code.
			For an n-bytes character, the first n bits are all one's, the n + 1 bit is 0, followed by n - 1 bytes with the most significant 2 bits being 10.
		This is how the UTF-8 encoding would work:
		     Number of Bytes   |        UTF-8 Octet Sequence
		                       |              (binary)
		   --------------------+-----------------------------------------
		            1          |   0xxxxxxx
		            2          |   110xxxxx 10xxxxxx
		            3          |   1110xxxx 10xxxxxx 10xxxxxx
		            4          |   11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
		x denotes a bit in the binary form of a byte that may be either 0 or 1.
		Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.
		Example 1:
		Input: data = [197,130,1]
		Output: true
		Explanation: data represents the octet sequence: 11000101 10000010 00000001.
		It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.
		Example 2:
		Input: data = [235,140,4]
		Output: false
		Explanation: data represented the octet sequence: 11101011 10001100 00000100.
		The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.
		The next byte is a continuation byte which starts with 10 and that's correct.
		But the second continuation byte does not start with 10, so it is invalid."
"Given an encoded string, return its decoded string.
		The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.
		You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].
		The test cases are generated so that the length of the output will never exceed 105.
		Example 1:
		Input: s = ""3[a]2[bc]""
		Output: ""aaabcbc""
		Example 2:
		Input: s = ""3[a2[c]]""
		Output: ""accaccacc""
		Example 3:
		Input: s = ""2[abc]3[cd]ef""
		Output: ""abcabccdcdcdef"""
"Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is greater than or equal to k.
		Example 1:
		Input: s = ""aaabb"", k = 3
		Output: 3
		Explanation: The longest substring is ""aaa"", as 'a' is repeated 3 times.
		Example 2:
		Input: s = ""ababbc"", k = 2
		Output: 5
		Explanation: The longest substring is ""ababb"", as 'a' is repeated 2 times and 'b' is repeated 3 times."
"You are given an integer array nums of length n.
		Assume arrk to be an array obtained by rotating nums by k positions clock-wise. We define the rotation function F on nums as follow:
			F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].
		Return the maximum value of F(0), F(1), ..., F(n-1).
		The test cases are generated so that the answer fits in a 32-bit integer.
		Example 1:
		Input: nums = [4,3,2,6]
		Output: 26
		Explanation:
		F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
		F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
		F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
		F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
		So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
		Example 2:
		Input: nums = [100]
		Output: 0"
"Given a positive integer n, you can apply one of the following operations:
			If n is even, replace n with n / 2.
			If n is odd, replace n with either n + 1 or n - 1.
		Return the minimum number of operations needed for n to become 1.
		Example 1:
		Input: n = 8
		Output: 3
		Explanation: 8 -> 4 -> 2 -> 1
		Example 2:
		Input: n = 7
		Output: 4
		Explanation: 7 -> 8 -> 4 -> 2 -> 1
		or 7 -> 6 -> 3 -> 2 -> 1
		Example 3:
		Input: n = 4
		Output: 2"
"Given an integer array nums with possible duplicates, randomly output the index of a given target number. You can assume that the given target number must exist in the array.
		Implement the Solution class:
			Solution(int[] nums) Initializes the object with the array nums.
			int pick(int target) Picks a random index i from nums where nums[i] == target. If there are multiple valid i's, then each index should have an equal probability of returning.
		Example 1:
		Input
		[""Solution"", ""pick"", ""pick"", ""pick""]
		[[[1, 2, 3, 3, 3]], [3], [1], [3]]
		Output
		[null, 4, 0, 2]
		Explanation
		Solution solution = new Solution([1, 2, 3, 3, 3]);
		solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.
		solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.
		solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning."
"You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.
		You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.
		Return the answers to all queries. If a single answer cannot be determined, return -1.0.
		Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.
		Example 1:
		Input: equations = [[""a"",""b""],[""b"",""c""]], values = [2.0,3.0], queries = [[""a"",""c""],[""b"",""a""],[""a"",""e""],[""a"",""a""],[""x"",""x""]]
		Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
		Explanation: 
		Given: a / b = 2.0, b / c = 3.0
		queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
		return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
		Example 2:
		Input: equations = [[""a"",""b""],[""b"",""c""],[""bc"",""cd""]], values = [1.5,2.5,5.0], queries = [[""a"",""c""],[""c"",""b""],[""bc"",""cd""],[""cd"",""bc""]]
		Output: [3.75000,0.40000,5.00000,0.20000]
		Example 3:
		Input: equations = [[""a"",""b""]], values = [0.5], queries = [[""a"",""b""],[""b"",""a""],[""a"",""c""],[""x"",""y""]]
		Output: [0.50000,2.00000,-1.00000,-1.00000]"
"Given an integer n, return the nth digit of the infinite integer sequence [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].
		Example 1:
		Input: n = 3
		Output: 3
		Example 2:
		Input: n = 11
		Output: 0
		Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10."
"A binary watch has 4 LEDs on the top to represent the hours (0-11), and 6 LEDs on the bottom to represent the minutes (0-59). Each LED represents a zero or one, with the least significant bit on the right.
			For example, the below binary watch reads ""4:51"".
		Given an integer turnedOn which represents the number of LEDs that are currently on (ignoring the PM), return all possible times the watch could represent. You may return the answer in any order.
		The hour must not contain a leading zero.
			For example, ""01:00"" is not valid. It should be ""1:00"".
		The minute must be consist of two digits and may contain a leading zero.
			For example, ""10:2"" is not valid. It should be ""10:02"".
		Example 1:
		Input: turnedOn = 1
		Output: [""0:01"",""0:02"",""0:04"",""0:08"",""0:16"",""0:32"",""1:00"",""2:00"",""4:00"",""8:00""]
		Example 2:
		Input: turnedOn = 9
		Output: []"
"Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.
		Example 1:
		Input: num = ""1432219"", k = 3
		Output: ""1219""
		Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
		Example 2:
		Input: num = ""10200"", k = 1
		Output: ""200""
		Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
		Example 3:
		Input: num = ""10"", k = 2
		Output: ""0""
		Explanation: Remove all the digits from the number and it is left with nothing which is 0."
"Given the root of a binary tree, return the sum of all left leaves.
		A leaf is a node with no children. A left leaf is a leaf that is the left child of another node.
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: 24
		Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.
		Example 2:
		Input: root = [1]
		Output: 0"
"Given an integer num, return a string representing its hexadecimal representation. For negative integers, two’s complement method is used.
		All the letters in the answer string should be lowercase characters, and there should not be any leading zeros in the answer except for the zero itself.
		Note: You are not allowed to use any built-in library method to directly solve this problem.
		Example 1:
		Input: num = 26
		Output: ""1a""
		Example 2:
		Input: num = -1
		Output: ""ffffffff"""
"You are given an array of people, people, which are the attributes of some people in a queue (not necessarily in order). Each people[i] = [hi, ki] represents the ith person of height hi with exactly ki other people in front who have a height greater than or equal to hi.
		Reconstruct and return the queue that is represented by the input array people. The returned queue should be formatted as an array queue, where queue[j] = [hj, kj] is the attributes of the jth person in the queue (queue[0] is the person at the front of the queue).
		Example 1:
		Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
		Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
		Explanation:
		Person 0 has height 5 with no other people taller or the same height in front.
		Person 1 has height 7 with no other people taller or the same height in front.
		Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.
		Person 3 has height 6 with one person taller or the same height in front, which is person 1.
		Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.
		Person 5 has height 7 with one person taller or the same height in front, which is person 1.
		Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.
		Example 2:
		Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
		Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]"
"Given a string s which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.
		Letters are case sensitive, for example, ""Aa"" is not considered a palindrome here.
		Example 1:
		Input: s = ""abccccdd""
		Output: 7
		Explanation: One longest palindrome that can be built is ""dccaccd"", whose length is 7.
		Example 2:
		Input: s = ""a""
		Output: 1
		Explanation: The longest palindrome that can be built is ""a"", whose length is 1."
"Given an integer n, return a string array answer (1-indexed) where:
			answer[i] == ""FizzBuzz"" if i is divisible by 3 and 5.
			answer[i] == ""Fizz"" if i is divisible by 3.
			answer[i] == ""Buzz"" if i is divisible by 5.
			answer[i] == i (as a string) if none of the above conditions are true.
		Example 1:
		Input: n = 3
		Output: [""1"",""2"",""Fizz""]
		Example 2:
		Input: n = 5
		Output: [""1"",""2"",""Fizz"",""4"",""Buzz""]
		Example 3:
		Input: n = 15
		Output: [""1"",""2"",""Fizz"",""4"",""Buzz"",""Fizz"",""7"",""8"",""Fizz"",""Buzz"",""11"",""Fizz"",""13"",""14"",""FizzBuzz""]"
"An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.
			For example, [1,3,5,7,9], [7,7,7,7], and [3,-1,-5,-9] are arithmetic sequences.
		Given an integer array nums, return the number of arithmetic subarrays of nums.
		A subarray is a contiguous subsequence of the array.
		Example 1:
		Input: nums = [1,2,3,4]
		Output: 3
		Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.
		Example 2:
		Input: nums = [1]
		Output: 0"
"Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.
		Example 1:
		Input: nums = [3,2,1]
		Output: 1
		Explanation:
		The first distinct maximum is 3.
		The second distinct maximum is 2.
		The third distinct maximum is 1.
		Example 2:
		Input: nums = [1,2]
		Output: 2
		Explanation:
		The first distinct maximum is 2.
		The second distinct maximum is 1.
		The third distinct maximum does not exist, so the maximum (2) is returned instead.
		Example 3:
		Input: nums = [2,2,3,1]
		Output: 1
		Explanation:
		The first distinct maximum is 3.
		The second distinct maximum is 2 (both 2's are counted together since they have the same value).
		The third distinct maximum is 1."
"Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.
		You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.
		Example 1:
		Input: num1 = ""11"", num2 = ""123""
		Output: ""134""
		Example 2:
		Input: num1 = ""456"", num2 = ""77""
		Output: ""533""
		Example 3:
		Input: num1 = ""0"", num2 = ""0""
		Output: ""0"""
"Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.
		Example 1:
		Input: nums = [1,5,11,5]
		Output: true
		Explanation: The array can be partitioned as [1, 5, 5] and [11].
		Example 2:
		Input: nums = [1,2,3,5]
		Output: false
		Explanation: The array cannot be partitioned into equal sum subsets."
"There is an m x n rectangular island that borders both the Pacific Ocean and Atlantic Ocean. The Pacific Ocean touches the island's left and top edges, and the Atlantic Ocean touches the island's right and bottom edges.
		The island is partitioned into a grid of square cells. You are given an m x n integer matrix heights where heights[r][c] represents the height above sea level of the cell at coordinate (r, c).
		The island receives a lot of rain, and the rain water can flow to neighboring cells directly north, south, east, and west if the neighboring cell's height is less than or equal to the current cell's height. Water can flow from any cell adjacent to an ocean into the ocean.
		Return a 2D list of grid coordinates result where result[i] = [ri, ci] denotes that rain water can flow from cell (ri, ci) to both the Pacific and Atlantic oceans.
		Example 1:
		Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
		Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]
		Explanation: The following cells can flow to the Pacific and Atlantic oceans, as shown below:
		[0,4]: [0,4] -> Pacific Ocean 
		       [0,4] -> Atlantic Ocean
		[1,3]: [1,3] -> [0,3] -> Pacific Ocean 
		       [1,3] -> [1,4] -> Atlantic Ocean
		[1,4]: [1,4] -> [1,3] -> [0,3] -> Pacific Ocean 
		       [1,4] -> Atlantic Ocean
		[2,2]: [2,2] -> [1,2] -> [0,2] -> Pacific Ocean 
		       [2,2] -> [2,3] -> [2,4] -> Atlantic Ocean
		[3,0]: [3,0] -> Pacific Ocean 
		       [3,0] -> [4,0] -> Atlantic Ocean
		[3,1]: [3,1] -> [3,0] -> Pacific Ocean 
		       [3,1] -> [4,1] -> Atlantic Ocean
		[4,0]: [4,0] -> Pacific Ocean 
		       [4,0] -> Atlantic Ocean
		Note that there are other possible paths for these cells to flow to the Pacific and Atlantic oceans.
		Example 2:
		Input: heights = [[1]]
		Output: [[0,0]]
		Explanation: The water can flow from the only cell to the Pacific and Atlantic oceans."
"Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.
		Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).
		Example 1:
		Input: board = [[""X"",""."",""."",""X""],[""."",""."",""."",""X""],[""."",""."",""."",""X""]]
		Output: 2
		Example 2:
		Input: board = [["".""]]
		Output: 0"
"Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 <= i <= j < n.
		Example 1:
		Input: nums = [3,10,5,25,2,8]
		Output: 28
		Explanation: The maximum result is 5 XOR 25 = 28.
		Example 2:
		Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
		Output: 127"
"Given a string s containing an out-of-order English representation of digits 0-9, return the digits in ascending order.
		Example 1:
		Input: s = ""owoztneoer""
		Output: ""012""
		Example 2:
		Input: s = ""fviefuro""
		Output: ""45"""
"You are given a string s and an integer k. You can choose any character of the string and change it to any other uppercase English character. You can perform this operation at most k times.
		Return the length of the longest substring containing the same letter you can get after performing the above operations.
		Example 1:
		Input: s = ""ABAB"", k = 2
		Output: 4
		Explanation: Replace the two 'A's with two 'B's or vice versa.
		Example 2:
		Input: s = ""AABABBA"", k = 1
		Output: 4
		Explanation: Replace the one 'A' in the middle with 'B' and form ""AABBBBA"".
		The substring ""BBBB"" has the longest repeating letters, which is 4."
"A gene string can be represented by an 8-character long string, with choices from 'A', 'C', 'G', and 'T'.
		Suppose we need to investigate a mutation from a gene string startGene to a gene string endGene where one mutation is defined as one single character changed in the gene string.
			For example, ""AACCGGTT"" --> ""AACCGGTA"" is one mutation.
		There is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.
		Given the two gene strings startGene and endGene and the gene bank bank, return the minimum number of mutations needed to mutate from startGene to endGene. If there is no such a mutation, return -1.
		Note that the starting point is assumed to be valid, so it might not be included in the bank.
		Example 1:
		Input: startGene = ""AACCGGTT"", endGene = ""AACCGGTA"", bank = [""AACCGGTA""]
		Output: 1
		Example 2:
		Input: startGene = ""AACCGGTT"", endGene = ""AAACGGTA"", bank = [""AACCGGTA"",""AACCGCTA"",""AAACGGTA""]
		Output: 2"
"Given a string s, return the number of segments in the string.
		A segment is defined to be a contiguous sequence of non-space characters.
		Example 1:
		Input: s = ""Hello, my name is John""
		Output: 5
		Explanation: The five segments are [""Hello,"", ""my"", ""name"", ""is"", ""John""]
		Example 2:
		Input: s = ""Hello""
		Output: 1"
"Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.
		Example 1:
		Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
		Output: 1
		Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
		Example 2:
		Input: intervals = [[1,2],[1,2],[1,2]]
		Output: 2
		Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
		Example 3:
		Input: intervals = [[1,2],[2,3]]
		Output: 0
		Explanation: You don't need to remove any of the intervals since they're already non-overlapping."
"You are given an array of intervals, where intervals[i] = [starti, endi] and each starti is unique.
		The right interval for an interval i is an interval j such that startj >= endi and startj is minimized. Note that i may equal j.
		Return an array of right interval indices for each interval i. If no right interval exists for interval i, then put -1 at index i.
		Example 1:
		Input: intervals = [[1,2]]
		Output: [-1]
		Explanation: There is only one interval in the collection, so it outputs -1.
		Example 2:
		Input: intervals = [[3,4],[2,3],[1,2]]
		Output: [-1,0,1]
		Explanation: There is no right interval for [3,4].
		The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.
		The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.
		Example 3:
		Input: intervals = [[1,4],[2,3],[3,4]]
		Output: [-1,2,-1]
		Explanation: There is no right interval for [1,4] and [3,4].
		The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3."
"Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.
		The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).
		Example 1:
		Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
		Output: 3
		Explanation: The paths that sum to 8 are shown.
		Example 2:
		Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
		Output: 3"
"Given two strings s and p, return an array of all the start indices of p's anagrams in s. You may return the answer in any order.
		An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
		Example 1:
		Input: s = ""cbaebabacd"", p = ""abc""
		Output: [0,6]
		Explanation:
		The substring with start index = 0 is ""cba"", which is an anagram of ""abc"".
		The substring with start index = 6 is ""bac"", which is an anagram of ""abc"".
		Example 2:
		Input: s = ""abab"", p = ""ab""
		Output: [0,1,2]
		Explanation:
		The substring with start index = 0 is ""ab"", which is an anagram of ""ab"".
		The substring with start index = 1 is ""ba"", which is an anagram of ""ab"".
		The substring with start index = 2 is ""ab"", which is an anagram of ""ab""."
"You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase may be incomplete.
		Given the integer n, return the number of complete rows of the staircase you will build.
		Example 1:
		Input: n = 5
		Output: 2
		Explanation: Because the 3rd row is incomplete, we return 2.
		Example 2:
		Input: n = 8
		Output: 3
		Explanation: Because the 4th row is incomplete, we return 3."
"Given an integer array nums of length n where all the integers of nums are in the range [1, n] and each integer appears once or twice, return an array of all the integers that appears twice.
		You must write an algorithm that runs in O(n) time and uses only constant extra space.
		Example 1:
		Input: nums = [4,3,2,7,8,2,3,1]
		Output: [2,3]
		Example 2:
		Input: nums = [1,1,2]
		Output: [1]
		Example 3:
		Input: nums = [1]
		Output: []"
"Given an array of characters chars, compress it using the following algorithm:
		Begin with an empty string s. For each group of consecutive repeating characters in chars:
			If the group's length is 1, append the character to s.
			Otherwise, append the character followed by the group's length.
		The compressed string s should not be returned separately, but instead, be stored in the input character array chars. Note that group lengths that are 10 or longer will be split into multiple characters in chars.
		After you are done modifying the input array, return the new length of the array.
		You must write an algorithm that uses only constant extra space.
		Example 1:
		Input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""]
		Output: Return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""]
		Explanation: The groups are ""aa"", ""bb"", and ""ccc"". This compresses to ""a2b2c3"".
		Example 2:
		Input: chars = [""a""]
		Output: Return 1, and the first character of the input array should be: [""a""]
		Explanation: The only group is ""a"", which remains uncompressed since it's a single character.
		Example 3:
		Input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""]
		Output: Return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""].
		Explanation: The groups are ""a"" and ""bbbbbbbbbbbb"". This compresses to ""ab12""."
"You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
		You may assume the two numbers do not contain any leading zero, except the number 0 itself.
		Example 1:
		Input: l1 = [7,2,4,3], l2 = [5,6,4]
		Output: [7,8,0,7]
		Example 2:
		Input: l1 = [2,4,3], l2 = [5,6,4]
		Output: [8,0,7]
		Example 3:
		Input: l1 = [0], l2 = [0]
		Output: [0]"
"You are given n points in the plane that are all distinct, where points[i] = [xi, yi]. A boomerang is a tuple of points (i, j, k) such that the distance between i and j equals the distance between i and k (the order of the tuple matters).
		Return the number of boomerangs.
		Example 1:
		Input: points = [[0,0],[1,0],[2,0]]
		Output: 2
		Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].
		Example 2:
		Input: points = [[1,1],[2,2],[3,3]]
		Output: 2
		Example 3:
		Input: points = [[1,1]]
		Output: 0"
"Given an array nums of n integers where nums[i] is in the range [1, n], return an array of all the integers in the range [1, n] that do not appear in nums.
		Example 1:
		Input: nums = [4,3,2,7,8,2,3,1]
		Output: [5,6]
		Example 2:
		Input: nums = [1,1]
		Output: [2]"
"# Medium
"
"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.
		Basically, the deletion can be divided into two stages:
			Search for a node to remove.
			If the node is found, delete the node.
		Example 1:
		Input: root = [5,3,6,2,4,null,7], key = 3
		Output: [5,4,6,2,null,null,7]
		Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
		One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
		Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.
		Example 2:
		Input: root = [5,3,6,2,4,null,7], key = 0
		Output: [5,3,6,2,4,null,7]
		Explanation: The tree does not contain a node with value = 0.
		Example 3:
		Input: root = [], key = 0
		Output: []"
"Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.
		Return the sorted string. If there are multiple answers, return any of them.
		Example 1:
		Input: s = ""tree""
		Output: ""eert""
		Explanation: 'e' appears twice while 'r' and 't' both appear once.
		So 'e' must appear before both 'r' and 't'. Therefore ""eetr"" is also a valid answer.
		Example 2:
		Input: s = ""cccaaa""
		Output: ""aaaccc""
		Explanation: Both 'c' and 'a' appear three times, so both ""cccaaa"" and ""aaaccc"" are valid answers.
		Note that ""cacaca"" is incorrect, as the same characters must be together.
		Example 3:
		Input: s = ""Aabb""
		Output: ""bbAa""
		Explanation: ""bbaA"" is also a valid answer, but ""Aabb"" is incorrect.
		Note that 'A' and 'a' are treated as two different characters."
"There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [xstart, xend] denotes a balloon whose horizontal diameter stretches between xstart and xend. You do not know the exact y-coordinates of the balloons.
		Arrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with xstart and xend is burst by an arrow shot at x if xstart <= x <= xend. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.
		Given the array points, return the minimum number of arrows that must be shot to burst all balloons.
		Example 1:
		Input: points = [[10,16],[2,8],[1,6],[7,12]]
		Output: 2
		Explanation: The balloons can be burst by 2 arrows:
		- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].
		- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].
		Example 2:
		Input: points = [[1,2],[3,4],[5,6],[7,8]]
		Output: 4
		Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows.
		Example 3:
		Input: points = [[1,2],[2,3],[3,4],[4,5]]
		Output: 2
		Explanation: The balloons can be burst by 2 arrows:
		- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].
		- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5]."
"Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
		In one move, you can increment n - 1 elements of the array by 1.
		Example 1:
		Input: nums = [1,2,3]
		Output: 3
		Explanation: Only three moves are needed (remember each move increments two elements):
		[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]
		Example 2:
		Input: nums = [1,1,1]
		Output: 0"
"Given four integer arrays nums1, nums2, nums3, and nums4 all of length n, return the number of tuples (i, j, k, l) such that:
			0 <= i, j, k, l < n
			nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0
		Example 1:
		Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
		Output: 2
		Explanation:
		The two tuples are:
		1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
		2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
		Example 2:
		Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
		Output: 1"
"Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.
		Each child i has a greed factor g[i], which is the minimum size of a cookie that the child will be content with; and each cookie j has a size s[j]. If s[j] >= g[i], we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.
		Example 1:
		Input: g = [1,2,3], s = [1,1]
		Output: 1
		Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
		And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
		You need to output 1.
		Example 2:
		Input: g = [1,2], s = [1,2,3]
		Output: 2
		Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
		You have 3 cookies and their sizes are big enough to gratify all of the children, 
		You need to output 2."
"Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].
		Return true if there is a 132 pattern in nums, otherwise, return false.
		Example 1:
		Input: nums = [1,2,3,4]
		Output: false
		Explanation: There is no 132 pattern in the sequence.
		Example 2:
		Input: nums = [3,1,4,2]
		Output: true
		Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
		Example 3:
		Input: nums = [-1,3,2,0]
		Output: true
		Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]."
"You are playing a game involving a circular array of non-zero integers nums. Each nums[i] denotes the number of indices forward/backward you must move if you are located at index i:
			If nums[i] is positive, move nums[i] steps forward, and
			If nums[i] is negative, move nums[i] steps backward.
		Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.
		A cycle in the array consists of a sequence of indices seq of length k where:
			Following the movement rules above results in the repeating index sequence seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...
			Every nums[seq[j]] is either all positive or all negative.
			k > 1
		Return true if there is a cycle in nums, or false otherwise.
		Example 1:
		Input: nums = [2,-1,1,2,2]
		Output: true
		Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
		We can see the cycle 0 --> 2 --> 3 --> 0 --> ..., and all of its nodes are white (jumping in the same direction).
		Example 2:
		Input: nums = [-1,-2,-3,-4,-5,6]
		Output: false
		Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
		The only cycle is of size 1, so we return false.
		Example 3:
		Input: nums = [1,-1,5,1,4]
		Output: true
		Explanation: The graph shows how the indices are connected. White nodes are jumping forward, while red is jumping backward.
		We can see the cycle 0 --> 1 --> 0 --> ..., and while it is of size > 1, it has a node jumping forward and a node jumping backward, so it is not a cycle.
		We can see the cycle 3 --> 4 --> 3 --> ..., and all of its nodes are white (jumping in the same direction)."
"Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.
		Example 1:
		Input: s = ""abab""
		Output: true
		Explanation: It is the substring ""ab"" twice.
		Example 2:
		Input: s = ""aba""
		Output: false
		Example 3:
		Input: s = ""abcabcabcabc""
		Output: true
		Explanation: It is the substring ""abc"" four times or the substring ""abcabc"" twice."
"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.
		Given two integers x and y, return the Hamming distance between them.
		Example 1:
		Input: x = 1, y = 4
		Output: 2
		Explanation:
		1   (0 0 0 1)
		4   (0 1 0 0)
		       ↑   ↑
		The above arrows point to positions where the corresponding bits are different.
		Example 2:
		Input: x = 3, y = 1
		Output: 1"
"Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
		In one move, you can increment or decrement an element of the array by 1.
		Test cases are designed so that the answer will fit in a 32-bit integer.
		Example 1:
		Input: nums = [1,2,3]
		Output: 2
		Explanation:
		Only two moves are needed (remember each move increments or decrements one element):
		[1,2,3]  =>  [2,2,3]  =>  [2,2,2]
		Example 2:
		Input: nums = [1,10,2,9]
		Output: 16"
"You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.
		Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).
		The island doesn't have ""lakes"", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.
		Example 1:
		Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
		Output: 16
		Explanation: The perimeter is the 16 yellow stripes in the image above.
		Example 2:
		Input: grid = [[1]]
		Output: 4
		Example 3:
		Input: grid = [[1,0]]
		Output: 4"
"In the ""100 game"" two players take turns adding, to a running total, any integer from 1 to 10. The player who first causes the running total to reach or exceed 100 wins.
		What if we change the game so that players cannot re-use integers?
		For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.
		Given two integers maxChoosableInteger and desiredTotal, return true if the first player to move can force a win, otherwise, return false. Assume both players play optimally.
		Example 1:
		Input: maxChoosableInteger = 10, desiredTotal = 11
		Output: false
		Explanation:
		No matter which integer the first player choose, the first player will lose.
		The first player can choose an integer from 1 up to 10.
		If the first player choose 1, the second player can only choose integers from 2 up to 10.
		The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.
		Same with other integers chosen by the first player, the second player will always win.
		Example 2:
		Input: maxChoosableInteger = 10, desiredTotal = 0
		Output: true
		Example 3:
		Input: maxChoosableInteger = 10, desiredTotal = 1
		Output: true"
"We define the string base to be the infinite wraparound string of ""abcdefghijklmnopqrstuvwxyz"", so base will look like this:
			""...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."".
		Given a string s, return the number of unique non-empty substrings of s are present in base.
		Example 1:
		Input: s = ""a""
		Output: 1
		Explanation: Only the substring ""a"" of s is in base.
		Example 2:
		Input: s = ""cac""
		Output: 2
		Explanation: There are two substrings (""a"", ""c"") of s in base.
		Example 3:
		Input: s = ""zab""
		Output: 6
		Explanation: There are six substrings (""z"", ""a"", ""b"", ""za"", ""ab"", and ""zab"") of s in base."
"Given a string queryIP, return ""IPv4"" if IP is a valid IPv4 address, ""IPv6"" if IP is a valid IPv6 address or ""Neither"" if IP is not a correct IP of any type.
		A valid IPv4 address is an IP in the form ""x1.x2.x3.x4"" where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, ""192.168.1.1"" and ""192.168.1.0"" are valid IPv4 addresses while ""192.168.01.1"", ""192.168.1.00"", and ""192.168@1.1"" are invalid IPv4 addresses.
		A valid IPv6 address is an IP in the form ""x1:x2:x3:x4:x5:x6:x7:x8"" where:
			1 <= xi.length <= 4
			xi is a hexadecimal string which may contain digits, lowercase English letter ('a' to 'f') and upper-case English letters ('A' to 'F').
			Leading zeros are allowed in xi.
		For example, ""2001:0db8:85a3:0000:0000:8a2e:0370:7334"" and ""2001:db8:85a3:0:0:8A2E:0370:7334"" are valid IPv6 addresses, while ""2001:0db8:85a3::8A2E:037j:7334"" and ""02001:0db8:85a3:0000:0000:8a2e:0370:7334"" are invalid IPv6 addresses.
		Example 1:
		Input: queryIP = ""172.16.254.1""
		Output: ""IPv4""
		Explanation: This is a valid IPv4 address, return ""IPv4"".
		Example 2:
		Input: queryIP = ""2001:0db8:85a3:0:0:8A2E:0370:7334""
		Output: ""IPv6""
		Explanation: This is a valid IPv6 address, return ""IPv6"".
		Example 3:
		Input: queryIP = ""256.256.256.256""
		Output: ""Neither""
		Explanation: This is neither a IPv4 address nor a IPv6 address."
"You are given an integer array matchsticks where matchsticks[i] is the length of the ith matchstick. You want to use all the matchsticks to make one square. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.
		Return true if you can make this square and false otherwise.
		Example 1:
		Input: matchsticks = [1,1,2,2,2]
		Output: true
		Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.
		Example 2:
		Input: matchsticks = [3,3,3,3,4]
		Output: false
		Explanation: You cannot find a way to form a square with all the matchsticks."
"You are given an array of binary strings strs and two integers m and n.
		Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.
		A set x is a subset of a set y if all elements of x are also elements of y.
		Example 1:
		Input: strs = [""10"",""0001"",""111001"",""1"",""0""], m = 5, n = 3
		Output: 4
		Explanation: The largest subset with at most 5 0's and 3 1's is {""10"", ""0001"", ""1"", ""0""}, so the answer is 4.
		Other valid but smaller subsets include {""0001"", ""1""} and {""10"", ""1"", ""0""}.
		{""111001""} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
		Example 2:
		Input: strs = [""10"",""0"",""1""], m = 1, n = 1
		Output: 2
		Explanation: The largest subset is {""0"", ""1""}, so the answer is 2."
"Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.
		Every house can be warmed, as long as the house is within the heater's warm radius range. 
		Given the positions of houses and heaters on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.
		Notice that all the heaters follow your radius standard, and the warm radius will the same.
		Example 1:
		Input: houses = [1,2,3], heaters = [2]
		Output: 1
		Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.
		Example 2:
		Input: houses = [1,2,3,4], heaters = [1,4]
		Output: 1
		Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.
		Example 3:
		Input: houses = [1,5], heaters = [2]
		Output: 3"
"The complement of an integer is the integer you get when you flip all the 0's to 1's and all the 1's to 0's in its binary representation.
			For example, The integer 5 is ""101"" in binary and its complement is ""010"" which is the integer 2.
		Given an integer num, return its complement.
		Example 1:
		Input: num = 5
		Output: 2
		Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
		Example 2:
		Input: num = 1
		Output: 0
		Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0."
"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.
		Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.
		Example 1:
		Input: nums = [4,14,2]
		Output: 6
		Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
		showing the four bits relevant in this case).
		The answer will be:
		HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.
		Example 2:
		Input: nums = [4,14,4]
		Output: 4"
"A magical string s consists of only '1' and '2' and obeys the following rules:
			The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.
		The first few elements of s is s = ""1221121221221121122……"". If we group the consecutive 1's and 2's in s, it will be ""1 22 11 2 1 22 1 22 11 2 11 22 ......"" and the occurrences of 1's or 2's in each group are ""1 2 2 1 1 2 1 2 2 1 2 2 ......"". You can see that the occurrence sequence is s itself.
		Given an integer n, return the number of 1's in the first n number in the magical string s.
		Example 1:
		Input: n = 6
		Output: 3
		Explanation: The first 6 elements of magical string s is ""122112"" and it contains three 1's, so return 3.
		Example 2:
		Input: n = 1
		Output: 1"
"You are given a license key represented as a string s that consists of only alphanumeric characters and dashes. The string is separated into n + 1 groups by n dashes. You are also given an integer k.
		We want to reformat the string s such that each group contains exactly k characters, except for the first group, which could be shorter than k but still must contain at least one character. Furthermore, there must be a dash inserted between two groups, and you should convert all lowercase letters to uppercase.
		Return the reformatted license key.
		Example 1:
		Input: s = ""5F3Z-2e-9-w"", k = 4
		Output: ""5F3Z-2E9W""
		Explanation: The string s has been split into two parts, each part has 4 characters.
		Note that the two extra dashes are not needed and can be removed.
		Example 2:
		Input: s = ""2-5g-3-J"", k = 2
		Output: ""2-5G-3J""
		Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above."
"Given a binary array nums, return the maximum number of consecutive 1's in the array.
		Example 1:
		Input: nums = [1,1,0,1,1,1]
		Output: 3
		Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.
		Example 2:
		Input: nums = [1,0,1,1,0,1]
		Output: 2"
"You are given an integer array nums. Two players are playing a game with this array: player 1 and player 2.
		Player 1 and player 2 take turns, with player 1 starting first. Both players start the game with a score of 0. At each turn, the player takes one of the numbers from either end of the array (i.e., nums[0] or nums[nums.length - 1]) which reduces the size of the array by 1. The player adds the chosen number to their score. The game ends when there are no more elements in the array.
		Return true if Player 1 can win the game. If the scores of both players are equal, then player 1 is still the winner, and you should also return true. You may assume that both players are playing optimally.
		Example 1:
		Input: nums = [1,5,2]
		Output: false
		Explanation: Initially, player 1 can choose between 1 and 2. 
		If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
		So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
		Hence, player 1 will never be the winner and you need to return false.
		Example 2:
		Input: nums = [1,5,233,7]
		Output: true
		Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.
		Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win."
"Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.
		Example 1:
		Input: nums = [4,6,7,7]
		Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]
		Example 2:
		Input: nums = [4,4,3,2,1]
		Output: [[4,4]]"
"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:
			The area of the rectangular web page you designed must equal to the given target area.
			The width W should not be larger than the length L, which means L >= W.
			The difference between length L and width W should be as small as possible.
		Return an array [L, W] where L and W are the length and width of the web page you designed in sequence.
		Example 1:
		Input: area = 4
		Output: [2,2]
		Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. 
		But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.
		Example 2:
		Input: area = 37
		Output: [37,1]
		Example 3:
		Input: area = 122122
		Output: [427,286]"
"You are given an integer array nums and an integer target.
		You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.
			For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression ""+2-1"".
		Return the number of different expressions that you can build, which evaluates to target.
		Example 1:
		Input: nums = [1,1,1,1,1], target = 3
		Output: 5
		Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
		-1 + 1 + 1 + 1 + 1 = 3
		+1 - 1 + 1 + 1 + 1 = 3
		+1 + 1 - 1 + 1 + 1 = 3
		+1 + 1 + 1 - 1 + 1 = 3
		+1 + 1 + 1 + 1 - 1 = 3
		Example 2:
		Input: nums = [1], target = 1
		Output: 1"
"Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly duration seconds. More formally, an attack at second t will mean Ashe is poisoned during the inclusive time interval [t, t + duration - 1]. If Teemo attacks again before the poison effect ends, the timer for it is reset, and the poison effect will end duration seconds after the new attack.
		You are given a non-decreasing integer array timeSeries, where timeSeries[i] denotes that Teemo attacks Ashe at second timeSeries[i], and an integer duration.
		Return the total number of seconds that Ashe is poisoned.
		Example 1:
		Input: timeSeries = [1,4], duration = 2
		Output: 4
		Explanation: Teemo's attacks on Ashe go as follows:
		- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
		- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.
		Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.
		Example 2:
		Input: timeSeries = [1,2], duration = 2
		Output: 3
		Explanation: Teemo's attacks on Ashe go as follows:
		- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
		- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.
		Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total."
"The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.
		You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.
		For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.
		Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.
		Example 1:
		Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
		Output: [-1,3,-1]
		Explanation: The next greater element for each value of nums1 is as follows:
		- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
		- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
		- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
		Example 2:
		Input: nums1 = [2,4], nums2 = [1,2,3,4]
		Output: [3,-1]
		Explanation: The next greater element for each value of nums1 is as follows:
		- 2 is underlined in nums2 = [1,2,3,4]. The next greater element is 3.
		- 4 is underlined in nums2 = [1,2,3,4]. There is no next greater element, so the answer is -1."
"Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.
		Example 1:
		Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
		Output: [1,2,4,7,5,3,6,8,9]
		Example 2:
		Input: mat = [[1,2],[3,4]]
		Output: [1,2,3,4]"
"Given an array of strings words, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.
		In the American keyboard:
			the first row consists of the characters ""qwertyuiop"",
			the second row consists of the characters ""asdfghjkl"", and
			the third row consists of the characters ""zxcvbnm"".
		Example 1:
		Input: words = [""Hello"",""Alaska"",""Dad"",""Peace""]
		Output: [""Alaska"",""Dad""]
		Example 2:
		Input: words = [""omk""]
		Output: []
		Example 3:
		Input: words = [""adsdf"",""sfd""]
		Output: [""adsdf"",""sfd""]"
"Given the root of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.
		If the tree has more than one mode, return them in any order.
		Assume a BST is defined as follows:
			The left subtree of a node contains only nodes with keys less than or equal to the node's key.
			The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
			Both the left and right subtrees must also be binary search trees.
		Example 1:
		Input: root = [1,null,2,2]
		Output: [2]
		Example 2:
		Input: root = [0]
		Output: [0]"
"Given a circular integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next greater number for every element in nums.
		The next greater number of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return -1 for this number.
		Example 1:
		Input: nums = [1,2,1]
		Output: [2,-1,2]
		Explanation: The first 1's next greater number is 2; 
		The number 2 can't find next greater number. 
		The second 1's next greater number needs to search circularly, which is also 2.
		Example 2:
		Input: nums = [1,2,3,4,3]
		Output: [2,3,4,-1,4]"
"Given an integer num, return a string of its base 7 representation.
		Example 1:
		Input: num = 100
		Output: ""202""
		Example 2:
		Input: num = -7
		Output: ""-10"""
"You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.
		The athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:
			The 1st place athlete's rank is ""Gold Medal"".
			The 2nd place athlete's rank is ""Silver Medal"".
			The 3rd place athlete's rank is ""Bronze Medal"".
			For the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is ""x"").
		Return an array answer of size n where answer[i] is the rank of the ith athlete.
		Example 1:
		Input: score = [5,4,3,2,1]
		Output: [""Gold Medal"",""Silver Medal"",""Bronze Medal"",""4"",""5""]
		Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th].
		Example 2:
		Input: score = [10,3,8,9,4]
		Output: [""Gold Medal"",""5"",""Bronze Medal"",""Silver Medal"",""4""]
		Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th]."
"A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that can divide x evenly.
		Given an integer n, return true if n is a perfect number, otherwise return false.
		Example 1:
		Input: num = 28
		Output: true
		Explanation: 28 = 1 + 2 + 4 + 7 + 14
		1, 2, 4, 7, and 14 are all divisors of 28.
		Example 2:
		Input: num = 7
		Output: false"
"Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.
		The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).
		Example 1:
		Input: root = [5,2,-3]
		Output: [2,-3,4]
		Example 2:
		Input: root = [5,2,-5]
		Output: [2]"
"Given the root of a binary tree, return the leftmost value in the last row of the tree.
		Example 1:
		Input: root = [2,1,3]
		Output: 1
		Example 2:
		Input: root = [1,2,3,4,null,5,6,null,null,7]
		Output: 7"
"Given the root of a binary tree, return an array of the largest value in each row of the tree (0-indexed).
		Example 1:
		Input: root = [1,3,2,5,3,null,9]
		Output: [1,3,9]
		Example 2:
		Input: root = [1,2,3]
		Output: [1,3]"
"Given a string s, find the longest palindromic subsequence's length in s.
		A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.
		Example 1:
		Input: s = ""bbbab""
		Output: 4
		Explanation: One possible longest palindromic subsequence is ""bbbb"".
		Example 2:
		Input: s = ""cbbd""
		Output: 2
		Explanation: One possible longest palindromic subsequence is ""bb""."
"You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.
		Return the number of combinations that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.
		You may assume that you have an infinite number of each kind of coin.
		The answer is guaranteed to fit into a signed 32-bit integer.
		Example 1:
		Input: amount = 5, coins = [1,2,5]
		Output: 4
		Explanation: there are four ways to make up the amount:
		5=5
		5=2+2+1
		5=2+1+1+1
		5=1+1+1+1+1
		Example 2:
		Input: amount = 3, coins = [2]
		Output: 0
		Explanation: the amount of 3 cannot be made up just with coins of 2.
		Example 3:
		Input: amount = 10, coins = [10]
		Output: 1"
"Given two strings a and b, return the length of the longest uncommon subsequence between a and b. If the longest uncommon subsequence does not exist, return -1.
		An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.
		A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.
			For example, ""abc"" is a subsequence of ""aebdc"" because you can delete the underlined characters in ""aebdc"" to get ""abc"". Other subsequences of ""aebdc"" include ""aebdc"", ""aeb"", and """" (empty string).
		Example 1:
		Input: a = ""aba"", b = ""cdc""
		Output: 3
		Explanation: One longest uncommon subsequence is ""aba"" because ""aba"" is a subsequence of ""aba"" but not ""cdc"".
		Note that ""cdc"" is also a longest uncommon subsequence.
		Example 2:
		Input: a = ""aaa"", b = ""bbb""
		Output: 3
		Explanation: The longest uncommon subsequences are ""aaa"" and ""bbb"".
		Example 3:
		Input: a = ""aaa"", b = ""aaa""
		Output: -1
		Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a."
"Given an array of strings strs, return the length of the longest uncommon subsequence between them. If the longest uncommon subsequence does not exist, return -1.
		An uncommon subsequence between an array of strings is a string that is a subsequence of one string but not the others.
		A subsequence of a string s is a string that can be obtained after deleting any number of characters from s.
			For example, ""abc"" is a subsequence of ""aebdc"" because you can delete the underlined characters in ""aebdc"" to get ""abc"". Other subsequences of ""aebdc"" include ""aebdc"", ""aeb"", and """" (empty string).
		Example 1:
		Input: strs = [""aba"",""cdc"",""eae""]
		Output: 3
		Example 2:
		Input: strs = [""aaa"",""aaa"",""aa""]
		Output: -1"
"Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.
		A good subarray is a subarray where:
			its length is at least two, and
			the sum of the elements of the subarray is a multiple of k.
		Note that:
			A subarray is a contiguous part of the array.
			An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.
		Example 1:
		Input: nums = [23,2,4,6,7], k = 6
		Output: true
		Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.
		Example 2:
		Input: nums = [23,2,6,4,7], k = 6
		Output: true
		Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
		42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.
		Example 3:
		Input: nums = [23,2,6,4,7], k = 13
		Output: false"
"Given a string s and a string array dictionary, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.
		Example 1:
		Input: s = ""abpcplea"", dictionary = [""ale"",""apple"",""monkey"",""plea""]
		Output: ""apple""
		Example 2:
		Input: s = ""abpcplea"", dictionary = [""a"",""b"",""c""]
		Output: ""a"""
"Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.
		Example 1:
		Input: nums = [0,1]
		Output: 2
		Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
		Example 2:
		Input: nums = [0,1,0]
		Output: 2
		Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1."
"Suppose you have n integers labeled 1 through n. A permutation of those n integers perm (1-indexed) is considered a beautiful arrangement if for every i (1 <= i <= n), either of the following is true:
			perm[i] is divisible by i.
			i is divisible by perm[i].
		Given an integer n, return the number of the beautiful arrangements that you can construct.
		Example 1:
		Input: n = 2
		Output: 2
		Explanation: 
		The first beautiful arrangement is [1,2]:
		    - perm[1] = 1 is divisible by i = 1
		    - perm[2] = 2 is divisible by i = 2
		The second beautiful arrangement is [2,1]:
		    - perm[1] = 2 is divisible by i = 1
		    - i = 2 is divisible by perm[2] = 1
		Example 2:
		Input: n = 1
		Output: 1"
"You are given the head of a linked list, and an integer k.
		Return the head of the linked list after swapping the values of the kth node from the beginning and the kth node from the end (the list is 1-indexed).
		Example 1:
		Input: head = [1,2,3,4,5], k = 2
		Output: [1,4,3,2,5]
		Example 2:
		Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
		Output: [7,9,6,6,8,7,3,0,9,5]"
"Let's play the minesweeper game (Wikipedia, online game)!
		You are given an m x n char matrix board representing the game board where:
			'M' represents an unrevealed mine,
			'E' represents an unrevealed empty square,
			'B' represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),
			digit ('1' to '8') represents how many mines are adjacent to this revealed square, and
			'X' represents a revealed mine.
		You are also given an integer array click where click = [clickr, clickc] represents the next click position among all the unrevealed squares ('M' or 'E').
		Return the board after revealing this position according to the following rules:
			If a mine 'M' is revealed, then the game is over. You should change it to 'X'.
			If an empty square 'E' with no adjacent mines is revealed, then change it to a revealed blank 'B' and all of its adjacent unrevealed squares should be revealed recursively.
			If an empty square 'E' with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.
			Return the board when no more squares will be revealed.
		Example 1:
		Input: board = [[""E"",""E"",""E"",""E"",""E""],[""E"",""E"",""M"",""E"",""E""],[""E"",""E"",""E"",""E"",""E""],[""E"",""E"",""E"",""E"",""E""]], click = [3,0]
		Output: [[""B"",""1"",""E"",""1"",""B""],[""B"",""1"",""M"",""1"",""B""],[""B"",""1"",""1"",""1"",""B""],[""B"",""B"",""B"",""B"",""B""]]
		Example 2:
		Input: board = [[""B"",""1"",""E"",""1"",""B""],[""B"",""1"",""M"",""1"",""B""],[""B"",""1"",""1"",""1"",""B""],[""B"",""B"",""B"",""B"",""B""]], click = [1,2]
		Output: [[""B"",""1"",""E"",""1"",""B""],[""B"",""1"",""X"",""1"",""B""],[""B"",""1"",""1"",""1"",""B""],[""B"",""B"",""B"",""B"",""B""]]"
"Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.
		Example 1:
		Input: root = [4,2,6,1,3]
		Output: 1
		Example 2:
		Input: root = [1,0,48,null,null,12,49]
		Output: 1"
"Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.
		A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:
			0 <= i, j < nums.length
			i != j
			nums[i] - nums[j] == k
		Notice that |val| denotes the absolute value of val.
		Example 1:
		Input: nums = [3,1,4,1,5], k = 2
		Output: 2
		Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
		Although we have two 1s in the input, we should only return the number of unique pairs.
		Example 2:
		Input: nums = [1,2,3,4,5], k = 1
		Output: 4
		Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).
		Example 3:
		Input: nums = [1,3,1,5,4], k = 0
		Output: 1
		Explanation: There is one 0-diff pair in the array, (1, 1)."
"# Medium
"
"A complex number can be represented as a string on the form ""real+imaginaryi"" where:
			real is the real part and is an integer in the range [-100, 100].
			imaginary is the imaginary part and is an integer in the range [-100, 100].
			i2 == -1.
		Given two complex numbers num1 and num2 as strings, return a string of the complex number that represents their multiplications.
		Example 1:
		Input: num1 = ""1+1i"", num2 = ""1+1i""
		Output: ""0+2i""
		Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.
		Example 2:
		Input: num1 = ""1+-1i"", num2 = ""1+-1i""
		Output: ""0+-2i""
		Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i."
"Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.
		As a reminder, a binary search tree is a tree that satisfies these constraints:
			The left subtree of a node contains only nodes with keys less than the node's key.
			The right subtree of a node contains only nodes with keys greater than the node's key.
			Both the left and right subtrees must also be binary search trees.
		Example 1:
		Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
		Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
		Example 2:
		Input: root = [0,null,1]
		Output: [1,null,1]"
"Given a list of 24-hour clock time points in ""HH:MM"" format, return the minimum minutes difference between any two time-points in the list.
		Example 1:
		Input: timePoints = [""23:59"",""00:00""]
		Output: 1
		Example 2:
		Input: timePoints = [""00:00"",""23:59"",""00:00""]
		Output: 0"
"You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
		Return the single element that appears only once.
		Your solution must run in O(log n) time and O(1) space.
		Example 1:
		Input: nums = [1,1,2,3,3,4,4,8,8]
		Output: 2
		Example 2:
		Input: nums = [3,3,7,7,10,11,11]
		Output: 10"
"Given a string s and an integer k, reverse the first k characters for every 2k characters counting from the start of the string.
		If there are fewer than k characters left, reverse all of them. If there are less than 2k but greater than or equal to k characters, then reverse the first k characters and leave the other as original.
		Example 1:
		Input: s = ""abcdefg"", k = 2
		Output: ""bacdfeg""
		Example 2:
		Input: s = ""abcd"", k = 2
		Output: ""bacd"""
"Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.
		The distance between two adjacent cells is 1.
		Example 1:
		Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
		Output: [[0,0,0],[0,1,0],[0,0,0]]
		Example 2:
		Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
		Output: [[0,0,0],[0,1,0],[1,2,1]]"
"Given the root of a binary tree, return the length of the diameter of the tree.
		The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
		The length of a path between two nodes is represented by the number of edges between them.
		Example 1:
		Input: root = [1,2,3,4,5]
		Output: 3
		Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].
		Example 2:
		Input: root = [1,2]
		Output: 1"
"There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.
		A province is a group of directly or indirectly connected cities and no other cities outside of the group.
		You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.
		Return the total number of provinces.
		Example 1:
		Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
		Output: 2
		Example 2:
		Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
		Output: 3"
"You are given a string s representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:
			'A': Absent.
			'L': Late.
			'P': Present.
		The student is eligible for an attendance award if they meet both of the following criteria:
			The student was absent ('A') for strictly fewer than 2 days total.
			The student was never late ('L') for 3 or more consecutive days.
		Return true if the student is eligible for an attendance award, or false otherwise.
		Example 1:
		Input: s = ""PPALLP""
		Output: true
		Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.
		Example 2:
		Input: s = ""PPALLL""
		Output: false
		Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award."
"You are given an integer array nums. The adjacent integers in nums will perform the float division.
			For example, for nums = [2,3,4], we will evaluate the expression ""2/3/4"".
		However, you can add any number of parenthesis at any position to change the priority of operations. You want to add these parentheses such the value of the expression after the evaluation is maximum.
		Return the corresponding expression that has the maximum value in string format.
		Note: your expression should not contain redundant parenthesis.
		Example 1:
		Input: nums = [1000,100,10,2]
		Output: ""1000/(100/10/2)""
		Explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200
		However, the bold parenthesis in ""1000/((100/10)/2)"" are redundant since they do not influence the operation priority.
		So you should return ""1000/(100/10/2)"".
		Other cases:
		1000/(100/10)/2 = 50
		1000/(100/(10/2)) = 50
		1000/100/10/2 = 0.5
		1000/100/(10/2) = 2
		Example 2:
		Input: nums = [2,3,4]
		Output: ""2/(3/4)""
		Explanation: (2/(3/4)) = 8/3 = 2.667
		It can be shown that after trying all possibilities, we cannot get an expression with evaluation greater than 2.667"
"There is a rectangular brick wall in front of you with n rows of bricks. The ith row has some number of bricks each of the same height (i.e., one unit) but they can be of different widths. The total width of each row is the same.
		Draw a vertical line from the top to the bottom and cross the least bricks. If your line goes through the edge of a brick, then the brick is not considered as crossed. You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.
		Given the 2D array wall that contains the information about the wall, return the minimum number of crossed bricks after drawing such a vertical line.
		Example 1:
		Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]
		Output: 2
		Example 2:
		Input: wall = [[1],[1],[1]]
		Output: 3"
"Given a positive integer n, find the smallest integer which has exactly the same digits existing in the integer n and is greater in value than n. If no such positive integer exists, return -1.
		Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return -1.
		Example 1:
		Input: n = 12
		Output: 21
		Example 2:
		Input: n = 21
		Output: -1"
"Given a string s, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.
		Example 1:
		Input: s = ""Let's take LeetCode contest""
		Output: ""s'teL ekat edoCteeL tsetnoc""
		Example 2:
		Input: s = ""God Ding""
		Output: ""doG gniD"""
"Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.
		A subarray is a contiguous non-empty sequence of elements within an array.
		Example 1:
		Input: nums = [1,1,1], k = 2
		Output: 2
		Example 2:
		Input: nums = [1,2,3], k = 3
		Output: 2"
"Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.
		Example 1:
		Input: nums = [1,4,3,2]
		Output: 4
		Explanation: All possible pairings (ignoring the ordering of elements) are:
		1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
		2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
		3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
		So the maximum possible sum is 4.
		Example 2:
		Input: nums = [6,2,6,5,1,2]
		Output: 9
		Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9."
"Given the root of a binary tree, return the sum of every tree node's tilt.
		The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as 0. The rule is similar if the node does not have a right child.
		Example 1:
		Input: root = [1,2,3]
		Output: 1
		Explanation: 
		Tilt of node 2 : |0-0| = 0 (no children)
		Tilt of node 3 : |0-0| = 0 (no children)
		Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)
		Sum of every tilt : 0 + 0 + 1 = 1
		Example 2:
		Input: root = [4,2,9,3,5,null,7]
		Output: 15
		Explanation: 
		Tilt of node 3 : |0-0| = 0 (no children)
		Tilt of node 5 : |0-0| = 0 (no children)
		Tilt of node 7 : |0-0| = 0 (no children)
		Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)
		Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)
		Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)
		Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15
		Example 3:
		Input: root = [21,7,14,1,1,2,2,3,3]
		Output: 9"
"You are given an integer array nums of length n where nums is a permutation of the numbers in the range [0, n - 1].
		You should build a set s[k] = {nums[k], nums[nums[k]], nums[nums[nums[k]]], ... } subjected to the following rule:
			The first element in s[k] starts with the selection of the element nums[k] of index = k.
			The next element in s[k] should be nums[nums[k]], and then nums[nums[nums[k]]], and so on.
			We stop adding right before a duplicate element occurs in s[k].
		Return the longest length of a set s[k].
		Example 1:
		Input: nums = [5,4,0,3,1,6,2]
		Output: 4
		Explanation: 
		nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.
		One of the longest sets s[k]:
		s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}
		Example 2:
		Input: nums = [0,1,2]
		Output: 1"
"In MATLAB, there is a handy function called reshape which can reshape an m x n matrix into a new one with a different size r x c keeping its original data.
		You are given an m x n matrix mat and two integers r and c representing the number of rows and the number of columns of the wanted reshaped matrix.
		The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.
		If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.
		Example 1:
		Input: mat = [[1,2],[3,4]], r = 1, c = 4
		Output: [[1,2,3,4]]
		Example 2:
		Input: mat = [[1,2],[3,4]], r = 2, c = 4
		Output: [[1,2],[3,4]]"
"Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
		In other words, return true if one of s1's permutations is the substring of s2.
		Example 1:
		Input: s1 = ""ab"", s2 = ""eidbaooo""
		Output: true
		Explanation: s2 contains one permutation of s1 (""ba"").
		Example 2:
		Input: s1 = ""ab"", s2 = ""eidboaoo""
		Output: false"
"Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise.
		A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node's descendants. The tree tree could also be considered as a subtree of itself.
		Example 1:
		Input: root = [3,4,5,1,2], subRoot = [4,1,2]
		Output: true
		Example 2:
		Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]
		Output: false"
"Alice has n candies, where the ith candy is of type candyType[i]. Alice noticed that she started to gain weight, so she visited a doctor.
		The doctor advised Alice to only eat n / 2 of the candies she has (n is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.
		Given the integer array candyType of length n, return the maximum number of different types of candies she can eat if she only eats n / 2 of them.
		Example 1:
		Input: candyType = [1,1,2,2,3,3]
		Output: 3
		Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.
		Example 2:
		Input: candyType = [1,1,2,3]
		Output: 2
		Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.
		Example 3:
		Input: candyType = [6,6,6,6]
		Output: 1
		Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type."
"There is an m x n grid with a ball. The ball is initially at the position [startRow, startColumn]. You are allowed to move the ball to one of the four adjacent cells in the grid (possibly out of the grid crossing the grid boundary). You can apply at most maxMove moves to the ball.
		Given the five integers m, n, maxMove, startRow, startColumn, return the number of paths to move the ball out of the grid boundary. Since the answer can be very large, return it modulo 109 + 7.
		Example 1:
		Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
		Output: 6
		Example 2:
		Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
		Output: 12"
"Given an integer array nums, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.
		Return the shortest such subarray and output its length.
		Example 1:
		Input: nums = [2,6,4,8,10,9,15]
		Output: 5
		Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
		Example 2:
		Input: nums = [1,2,3,4]
		Output: 0
		Example 3:
		Input: nums = [1]
		Output: 0"
"Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.
		In one step, you can delete exactly one character in either string.
		Example 1:
		Input: word1 = ""sea"", word2 = ""eat""
		Output: 2
		Explanation: You need one step to make ""sea"" to ""ea"" and another step to make ""eat"" to ""ea"".
		Example 2:
		Input: word1 = ""leetcode"", word2 = ""etco""
		Output: 4"
"Given a string expression representing an expression of fraction addition and subtraction, return the calculation result in string format.
		The final result should be an irreducible fraction. If your final result is an integer, change it to the format of a fraction that has a denominator 1. So in this case, 2 should be converted to 2/1.
		Example 1:
		Input: expression = ""-1/2+1/2""
		Output: ""0/1""
		Example 2:
		Input: expression = ""-1/2+1/2+1/3""
		Output: ""1/3""
		Example 3:
		Input: expression = ""1/3-1/2""
		Output: ""-1/6"""
"Given the coordinates of four points in 2D space p1, p2, p3 and p4, return true if the four points construct a square.
		The coordinate of a point pi is represented as [xi, yi]. The input is not given in any order.
		A valid square has four equal sides with positive length and four equal angles (90-degree angles).
		Example 1:
		Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
		Output: true
		Example 2:
		Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
		Output: false
		Example 3:
		Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]
		Output: true"
"We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.
		Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.
		A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.
		Example 1:
		Input: nums = [1,3,2,2,5,2,3,7]
		Output: 5
		Explanation: The longest harmonious subsequence is [3,2,2,2,3].
		Example 2:
		Input: nums = [1,2,3,4]
		Output: 2
		Example 3:
		Input: nums = [1,1,1,1]
		Output: 0"
"You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.
		Count and return the number of maximum integers in the matrix after performing all the operations.
		Example 1:
		Input: m = 3, n = 3, ops = [[2,2],[3,3]]
		Output: 4
		Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.
		Example 2:
		Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
		Output: 4
		Example 3:
		Input: m = 3, n = 3, ops = []
		Output: 9"
"Given two arrays of strings list1 and list2, find the common strings with the least index sum.
		A common string is a string that appeared in both list1 and list2.
		A common string with the least index sum is a common string such that if it appeared at list1[i] and list2[j] then i + j should be the minimum value among all the other common strings.
		Return all the common strings with the least index sum. Return the answer in any order.
		Example 1:
		Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""Piatti"",""The Grill at Torrey Pines"",""Hungry Hunter Steakhouse"",""Shogun""]
		Output: [""Shogun""]
		Explanation: The only common string is ""Shogun"".
		Example 2:
		Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Shogun"",""Burger King""]
		Output: [""Shogun""]
		Explanation: The common string with the least index sum is ""Shogun"" with index sum = (0 + 1) = 1.
		Example 3:
		Input: list1 = [""happy"",""sad"",""good""], list2 = [""sad"",""happy"",""good""]
		Output: [""sad"",""happy""]
		Explanation: There are three common strings:
		""happy"" with index sum = (0 + 1) = 1.
		""sad"" with index sum = (1 + 0) = 1.
		""good"" with index sum = (2 + 2) = 4.
		The strings with the least index sum are ""sad"" and ""happy""."
"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.
		Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.
		Example 1:
		Input: flowerbed = [1,0,0,0,1], n = 1
		Output: true
		Example 2:
		Input: flowerbed = [1,0,0,0,1], n = 2
		Output: false"
"Given the root of a binary tree, construct a string consisting of parenthesis and integers from a binary tree with the preorder traversal way, and return it.
		Omit all the empty parenthesis pairs that do not affect the one-to-one mapping relationship between the string and the original binary tree.
		Example 1:
		Input: root = [1,2,3,4]
		Output: ""1(2(4))(3)""
		Explanation: Originally, it needs to be ""1(2(4)())(3()())"", but you need to omit all the unnecessary empty parenthesis pairs. And it will be ""1(2(4))(3)""
		Example 2:
		Input: root = [1,2,3,null,4]
		Output: ""1(2()(4))(3)""
		Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output."
"Given a list paths of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.
		A group of duplicate files consists of at least two files that have the same content.
		A single directory info string in the input list has the following format:
			""root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)""
		It means there are n files (f1.txt, f2.txt ... fn.txt) with content (f1_content, f2_content ... fn_content) respectively in the directory ""root/d1/d2/.../dm"". Note that n >= 1 and m >= 0. If m = 0, it means the directory is just the root directory.
		The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:
			""directory_path/file_name.txt""
		Example 1:
		Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)"",""root 4.txt(efgh)""]
		Output: [[""root/a/2.txt"",""root/c/d/4.txt"",""root/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]
		Example 2:
		Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)""]
		Output: [[""root/a/2.txt"",""root/c/d/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]"
"Given an integer array nums, return the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.
		Example 1:
		Input: nums = [2,2,3,4]
		Output: 3
		Explanation: Valid combinations are: 
		2,3,4 (using the first 2)
		2,3,4 (using the second 2)
		2,2,3
		Example 2:
		Input: nums = [4,2,3,4]
		Output: 4"
"You are given two binary trees root1 and root2.
		Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.
		Return the merged tree.
		Note: The merging process must start from the root nodes of both trees.
		Example 1:
		Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
		Output: [3,4,5,5,4,null,7]
		Example 2:
		Input: root1 = [1], root2 = [1,2]
		Output: [2,2]"
"Given a characters array tasks, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.
		However, there is a non-negative integer n that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least n units of time between any two same tasks.
		Return the least number of units of times that the CPU will take to finish all the given tasks.
		Example 1:
		Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 2
		Output: 8
		Explanation: 
		A -> B -> idle -> A -> B -> idle -> A -> B
		There is at least 2 units of time between any two same tasks.
		Example 2:
		Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 0
		Output: 6
		Explanation: On this case any permutation of size 6 would work since n = 0.
		[""A"",""A"",""A"",""B"",""B"",""B""]
		[""A"",""B"",""A"",""B"",""A"",""B""]
		[""B"",""B"",""B"",""A"",""A"",""A""]
		...
		And so on.
		Example 3:
		Input: tasks = [""A"",""A"",""A"",""A"",""A"",""A"",""B"",""C"",""D"",""E"",""F"",""G""], n = 2
		Output: 16
		Explanation: 
		One possible solution is
		A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A"
"Given the root of a binary tree and two integers val and depth, add a row of nodes with value val at the given depth depth.
		Note that the root node is at depth 1.
		The adding rule is:
			Given the integer depth, for each not null tree node cur at the depth depth - 1, create two tree nodes with value val as cur's left subtree root and right subtree root.
			cur's original left subtree should be the left subtree of the new left subtree root.
			cur's original right subtree should be the right subtree of the new right subtree root.
			If depth == 1 that means there is no depth depth - 1 at all, then create a tree node with value val as the new root of the whole original tree, and the original tree is the new root's left subtree.
		Example 1:
		Input: root = [4,2,6,3,1,5], val = 1, depth = 2
		Output: [4,1,1,2,null,null,6,3,1,5]
		Example 2:
		Input: root = [4,2,null,3,1], val = 1, depth = 3
		Output: [4,2,null,1,1,3,null,null,1]"
"Given an integer array nums, find three numbers whose product is maximum and return the maximum product.
		Example 1:
		Input: nums = [1,2,3]
		Output: 6
		Example 2:
		Input: nums = [1,2,3,4]
		Output: 24
		Example 3:
		Input: nums = [-1,-2,-3]
		Output: -6"
"Given a non-negative integer c, decide whether there're two integers a and b such that a2 + b2 = c.
		Example 1:
		Input: c = 5
		Output: true
		Explanation: 1 * 1 + 2 * 2 = 5
		Example 2:
		Input: c = 3
		Output: false"
"On a single-threaded CPU, we execute a program containing n functions. Each function has a unique ID between 0 and n-1.
		Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.
		You are given a list logs, where logs[i] represents the ith log message formatted as a string ""{function_id}:{""start"" | ""end""}:{timestamp}"". For example, ""0:start:3"" means a function call with function ID 0 started at the beginning of timestamp 3, and ""1:end:2"" means a function call with function ID 1 ended at the end of timestamp 2. Note that a function can be called multiple times, possibly recursively.
		A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for 2 time units and another call executing for 1 time unit, the exclusive time is 2 + 1 = 3.
		Return the exclusive time of each function in an array, where the value at the ith index represents the exclusive time for the function with ID i.
		Example 1:
		Input: n = 2, logs = [""0:start:0"",""1:start:2"",""1:end:5"",""0:end:6""]
		Output: [3,4]
		Explanation:
		Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.
		Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.
		Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.
		So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.
		Example 2:
		Input: n = 1, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""0:start:6"",""0:end:6"",""0:end:7""]
		Output: [8]
		Explanation:
		Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
		Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
		Function 0 (initial call) resumes execution then immediately calls itself again.
		Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.
		Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.
		So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.
		Example 3:
		Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:6"",""1:end:6"",""0:end:7""]
		Output: [7,1]
		Explanation:
		Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.
		Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.
		Function 0 (initial call) resumes execution then immediately calls function 1.
		Function 1 starts at the beginning of time 6, executes 1 unit of time, and ends at the end of time 6.
		Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.
		So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing."
"Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.
		Example 1:
		Input: root = [3,9,20,null,null,15,7]
		Output: [3.00000,14.50000,11.00000]
		Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
		Hence return [3, 14.5, 11].
		Example 2:
		Input: root = [3,9,20,15,7]
		Output: [3.00000,14.50000,11.00000]"
"In LeetCode Store, there are n items to sell. Each item has a price. However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.
		You are given an integer array price where price[i] is the price of the ith item, and an integer array needs where needs[i] is the number of pieces of the ith item you want to buy.
		You are also given an array special where special[i] is of size n + 1 where special[i][j] is the number of pieces of the jth item in the ith offer and special[i][n] (i.e., the last integer in the array) is the price of the ith offer.
		Return the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. You are not allowed to buy more items than you want, even if that would lower the overall price. You could use any of the special offers as many times as you want.
		Example 1:
		Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]
		Output: 14
		Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
		In special offer 1, you can pay $5 for 3A and 0B
		In special offer 2, you can pay $10 for 1A and 2B. 
		You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.
		Example 2:
		Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]
		Output: 11
		Explanation: The price of A is $2, and $3 for B, $4 for C. 
		You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. 
		You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. 
		You cannot add more items, though only $9 for 2A ,2B and 1C."
"Solve a given equation and return the value of 'x' in the form of a string ""x=#value"". The equation contains only '+', '-' operation, the variable 'x' and its coefficient. You should return ""No solution"" if there is no solution for the equation, or ""Infinite solutions"" if there are infinite solutions for the equation.
		If there is exactly one solution for the equation, we ensure that the value of 'x' is an integer.
		Example 1:
		Input: equation = ""x+5-3+x=6+x-2""
		Output: ""x=2""
		Example 2:
		Input: equation = ""x=x""
		Output: ""Infinite solutions""
		Example 3:
		Input: equation = ""2x=x""
		Output: ""x=0"""
"You are given an integer array nums consisting of n elements, and an integer k.
		Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.
		Example 1:
		Input: nums = [1,12,-5,-6,50,3], k = 4
		Output: 12.75000
		Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75
		Example 2:
		Input: nums = [5], k = 1
		Output: 5.00000"
"You have a set of integers s, which originally contains all the numbers from 1 to n. Unfortunately, due to some error, one of the numbers in s got duplicated to another number in the set, which results in repetition of one number and loss of another number.
		You are given an integer array nums representing the data status of this set after the error.
		Find the number that occurs twice and the number that is missing and return them in the form of an array.
		Example 1:
		Input: nums = [1,2,2,4]
		Output: [2,3]
		Example 2:
		Input: nums = [1,1]
		Output: [1,2]"
"You are given an array of n pairs pairs where pairs[i] = [lefti, righti] and lefti < righti.
		A pair p2 = [c, d] follows a pair p1 = [a, b] if b < c. A chain of pairs can be formed in this fashion.
		Return the length longest chain which can be formed.
		You do not need to use up all the given intervals. You can select pairs in any order.
		Example 1:
		Input: pairs = [[1,2],[2,3],[3,4]]
		Output: 2
		Explanation: The longest chain is [1,2] -> [3,4].
		Example 2:
		Input: pairs = [[1,2],[7,8],[4,5]]
		Output: 3
		Explanation: The longest chain is [1,2] -> [4,5] -> [7,8]."
"Given a string s, return the number of palindromic substrings in it.
		A string is a palindrome when it reads the same backward as forward.
		A substring is a contiguous sequence of characters within the string.
		Example 1:
		Input: s = ""abc""
		Output: 3
		Explanation: Three palindromic strings: ""a"", ""b"", ""c"".
		Example 2:
		Input: s = ""aaa""
		Output: 6
		Explanation: Six palindromic strings: ""a"", ""a"", ""a"", ""aa"", ""aa"", ""aaa""."
"In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root ""an"" is followed by the successor word ""other"", we can form a new word ""another"".
		Given a dictionary consisting of many roots and a sentence consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.
		Return the sentence after the replacement.
		Example 1:
		Input: dictionary = [""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
		Output: ""the cat was rat by the bat""
		Example 2:
		Input: dictionary = [""a"",""b"",""c""], sentence = ""aadsfasf absbs bbab cadsfafs""
		Output: ""a a b c"""
"In the world of Dota2, there are two parties: the Radiant and the Dire.
		The Dota2 senate consists of senators coming from two parties. Now the Senate wants to decide on a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise one of the two rights:
			Ban one senator's right: A senator can make another senator lose all his rights in this and all the following rounds.
			Announce the victory: If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.
		Given a string senate representing each senator's party belonging. The character 'R' and 'D' represent the Radiant party and the Dire party. Then if there are n senators, the size of the given string will be n.
		The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.
		Suppose every senator is smart enough and will play the best strategy for his own party. Predict which party will finally announce the victory and change the Dota2 game. The output should be ""Radiant"" or ""Dire"".
		Example 1:
		Input: senate = ""RD""
		Output: ""Radiant""
		Explanation: 
		The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
		And the second senator can't exercise any rights anymore since his right has been banned. 
		And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.
		Example 2:
		Input: senate = ""RDD""
		Output: ""Dire""
		Explanation: 
		The first senator comes from Radiant and he can just ban the next senator's right in round 1. 
		And the second senator can't exercise any rights anymore since his right has been banned. 
		And the third senator comes from Dire and he can ban the first senator's right in round 1. 
		And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote."
"There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:
			Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).
			Paste: You can paste the characters which are copied last time.
		Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.
		Example 1:
		Input: n = 3
		Output: 3
		Explanation: Initially, we have one character 'A'.
		In step 1, we use Copy All operation.
		In step 2, we use Paste operation to get 'AA'.
		In step 3, we use Paste operation to get 'AAA'.
		Example 2:
		Input: n = 1
		Output: 0"
"Given the root of a binary tree, return all duplicate subtrees.
		For each kind of duplicate subtrees, you only need to return the root node of any one of them.
		Two trees are duplicate if they have the same structure with the same node values.
		Example 1:
		Input: root = [1,2,3,4,null,2,4,null,null,4]
		Output: [[2,4],[4]]
		Example 2:
		Input: root = [2,1,1]
		Output: [[1]]
		Example 3:
		Input: root = [2,2,2,3,null,3,null]
		Output: [[2,3],[3]]"
"Given the root of a binary search tree and an integer k, return true if there exist two elements in the BST such that their sum is equal to k, or false otherwise.
		Example 1:
		Input: root = [5,3,6,2,4,null,7], k = 9
		Output: true
		Example 2:
		Input: root = [5,3,6,2,4,null,7], k = 28
		Output: false"
"You are given an integer array nums with no duplicates. A maximum binary tree can be built recursively from nums using the following algorithm:
			Create a root node whose value is the maximum value in nums.
			Recursively build the left subtree on the subarray prefix to the left of the maximum value.
			Recursively build the right subtree on the subarray suffix to the right of the maximum value.
		Return the maximum binary tree built from nums.
		Example 1:
		Input: nums = [3,2,1,6,0,5]
		Output: [6,3,5,null,2,0,null,null,1]
		Explanation: The recursive calls are as follow:
		- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].
		    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].
		        - Empty array, so no child.
		        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].
		            - Empty array, so no child.
		            - Only one element, so child is a node with value 1.
		    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].
		        - Only one element, so child is a node with value 0.
		        - Empty array, so no child.
		Example 2:
		Input: nums = [3,2,1]
		Output: [3,null,2,null,1]"
"Given the root of a binary tree, construct a 0-indexed m x n string matrix res that represents a formatted layout of the tree. The formatted layout matrix should be constructed using the following rules:
			The height of the tree is height and the number of rows m should be equal to height + 1.
			The number of columns n should be equal to 2height+1 - 1.
			Place the root node in the middle of the top row (more formally, at location res[0][(n-1)/2]).
			For each node that has been placed in the matrix at position res[r][c], place its left child at res[r+1][c-2height-r-1] and its right child at res[r+1][c+2height-r-1].
			Continue this process until all the nodes in the tree have been placed.
			Any empty cells should contain the empty string """".
		Return the constructed matrix res.
		Example 1:
		Input: root = [1,2]
		Output: 
		[["""",""1"",""""],
		 [""2"","""",""""]]
		Example 2:
		Input: root = [1,2,3,null,4]
		Output: 
		[["""","""","""",""1"","""","""",""""],
		 ["""",""2"","""","""","""",""3"",""""],
		 ["""","""",""4"","""","""","""",""""]]"
"There is a robot starting at the position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.
		You are given a string moves that represents the move sequence of the robot where moves[i] represents its ith move. Valid moves are 'R' (right), 'L' (left), 'U' (up), and 'D' (down).
		Return true if the robot returns to the origin after it finishes all of its moves, or false otherwise.
		Note: The way that the robot is ""facing"" is irrelevant. 'R' will always make the robot move to the right once, 'L' will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.
		Example 1:
		Input: moves = ""UD""
		Output: true
		Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.
		Example 2:
		Input: moves = ""LL""
		Output: false
		Explanation: The robot moves left twice. It ends up two ""moves"" to the left of the origin. We return false because it is not at the origin at the end of its moves."
"Given a sorted integer array arr, two integers k and x, return the k closest integers to x in the array. The result should also be sorted in ascending order.
		An integer a is closer to x than an integer b if:
			|a - x| < |b - x|, or
			|a - x| == |b - x| and a < b
		Example 1:
		Input: arr = [1,2,3,4,5], k = 4, x = 3
		Output: [1,2,3,4]
		Example 2:
		Input: arr = [1,2,3,4,5], k = 4, x = -1
		Output: [1,2,3,4]"
"You are given an integer array nums that is sorted in non-decreasing order.
		Determine if it is possible to split nums into one or more subsequences such that both of the following conditions are true:
			Each subsequence is a consecutive increasing sequence (i.e. each integer is exactly one more than the previous integer).
			All subsequences have a length of 3 or more.
		Return true if you can split nums according to the above conditions, or false otherwise.
		A subsequence of an array is a new array that is formed from the original array by deleting some (can be none) of the elements without disturbing the relative positions of the remaining elements. (i.e., [1,3,5] is a subsequence of [1,2,3,4,5] while [1,3,2] is not).
		Example 1:
		Input: nums = [1,2,3,3,4,5]
		Output: true
		Explanation: nums can be split into the following subsequences:
		[1,2,3,3,4,5] --> 1, 2, 3
		[1,2,3,3,4,5] --> 3, 4, 5
		Example 2:
		Input: nums = [1,2,3,3,4,4,5,5]
		Output: true
		Explanation: nums can be split into the following subsequences:
		[1,2,3,3,4,4,5,5] --> 1, 2, 3, 4, 5
		[1,2,3,3,4,4,5,5] --> 3, 4, 5
		Example 3:
		Input: nums = [1,2,3,4,4,5]
		Output: false
		Explanation: It is impossible to split nums into consecutive increasing subsequences of length 3 or more."
"An image smoother is a filter of the size 3 x 3 that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).
		Given an m x n integer matrix img representing the grayscale of an image, return the image after applying the smoother on each cell of it.
		Example 1:
		Input: img = [[1,1,1],[1,0,1],[1,1,1]]
		Output: [[0,0,0],[0,0,0],[0,0,0]]
		Explanation:
		For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
		For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
		For the point (1,1): floor(8/9) = floor(0.88888889) = 0
		Example 2:
		Input: img = [[100,200,100],[200,50,200],[100,200,100]]
		Output: [[137,141,137],[141,138,141],[137,141,137]]
		Explanation:
		For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137
		For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141
		For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138"
"Given the root of a binary tree, return the maximum width of the given tree.
		The maximum width of a tree is the maximum width among all levels.
		The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes that would be present in a complete binary tree extending down to that level are also counted into the length calculation.
		It is guaranteed that the answer will in the range of a 32-bit signed integer.
		Example 1:
		Input: root = [1,3,2,5,3,null,9]
		Output: 4
		Explanation: The maximum width exists in the third level with length 4 (5,3,null,9).
		Example 2:
		Input: root = [1,3,2,5,null,null,9,6,null,7]
		Output: 7
		Explanation: The maximum width exists in the fourth level with length 7 (6,null,null,null,null,null,7).
		Example 3:
		Input: root = [1,3,2,5]
		Output: 2
		Explanation: The maximum width exists in the second level with length 2 (3,2)."
"Given an array nums with n integers, your task is to check if it could become non-decreasing by modifying at most one element.
		We define an array is non-decreasing if nums[i] <= nums[i + 1] holds for every i (0-based) such that (0 <= i <= n - 2).
		Example 1:
		Input: nums = [4,2,3]
		Output: true
		Explanation: You could modify the first 4 to 1 to get a non-decreasing array.
		Example 2:
		Input: nums = [4,2,1]
		Output: false
		Explanation: You cannot get a non-decreasing array by modifying at most one element."
"Given two integers n and k, construct a list answer that contains n different positive integers ranging from 1 to n and obeys the following requirement:
			Suppose this list is answer = [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly k distinct integers.
		Return the list answer. If there multiple valid answers, return any of them.
		Example 1:
		Input: n = 3, k = 1
		Output: [1,2,3]
		Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1
		Example 2:
		Input: n = 3, k = 2
		Output: [1,3,2]
		Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2."
"Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.
		Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.
		Example 1:
		Input: root = [1,0,2], low = 1, high = 2
		Output: [1,null,2]
		Example 2:
		Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
		Output: [3,2,null,1]"
"You are given an integer num. You can swap two digits at most once to get the maximum valued number.
		Return the maximum valued number you can get.
		Example 1:
		Input: num = 2736
		Output: 7236
		Explanation: Swap the number 2 and the number 7.
		Example 2:
		Input: num = 9973
		Output: 9973
		Explanation: No swap."
"Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly two or zero sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property root.val = min(root.left.val, root.right.val) always holds.
		Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.
		If no such second minimum value exists, output -1 instead.
		Example 1:
		Input: root = [2,2,5,null,null,5,7]
		Output: 5
		Explanation: The smallest value is 2, the second smallest value is 5.
		Example 2:
		Input: root = [2,2,2]
		Output: -1
		Explanation: The smallest value is 2, but there isn't any second smallest value."
"There is a room with n bulbs labeled from 1 to n that all are turned on initially, and four buttons on the wall. Each of the four buttons has a different functionality where:
			Button 1: Flips the status of all the bulbs.
			Button 2: Flips the status of all the bulbs with even labels (i.e., 2, 4, ...).
			Button 3: Flips the status of all the bulbs with odd labels (i.e., 1, 3, ...).
			Button 4: Flips the status of all the bulbs with a label j = 3k + 1 where k = 0, 1, 2, ... (i.e., 1, 4, 7, 10, ...).
		You must make exactly presses button presses in total. For each press, you may pick any of the four buttons to press.
		Given the two integers n and presses, return the number of different possible statuses after performing all presses button presses.
		Example 1:
		Input: n = 1, presses = 1
		Output: 2
		Explanation: Status can be:
		- [off] by pressing button 1
		- [on] by pressing button 2
		Example 2:
		Input: n = 2, presses = 1
		Output: 3
		Explanation: Status can be:
		- [off, off] by pressing button 1
		- [on, off] by pressing button 2
		- [off, on] by pressing button 3
		Example 3:
		Input: n = 3, presses = 1
		Output: 4
		Explanation: Status can be:
		- [off, off, off] by pressing button 1
		- [off, on, off] by pressing button 2
		- [on, off, on] by pressing button 3
		- [off, on, on] by pressing button 4"
"Given an integer array nums, return the number of longest increasing subsequences.
		Notice that the sequence has to be strictly increasing.
		Example 1:
		Input: nums = [1,3,5,4,7]
		Output: 2
		Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].
		Example 2:
		Input: nums = [2,2,2,2,2]
		Output: 5
		Explanation: The length of the longest increasing subsequence is 1, and there are 5 increasing subsequences of length 1, so output 5."
"Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.
		A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].
		Example 1:
		Input: nums = [1,3,5,4,7]
		Output: 3
		Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
		Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
		4.
		Example 2:
		Input: nums = [2,2,2,2,2]
		Output: 1
		Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
		increasing."
"Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.
		Implement the MagicDictionary class:
			MagicDictionary() Initializes the object.
			void buildDict(String[] dictionary) Sets the data structure with an array of distinct strings dictionary.
			bool search(String searchWord) Returns true if you can change exactly one character in searchWord to match any string in the data structure, otherwise returns false.
		Example 1:
		Input
		[""MagicDictionary"", ""buildDict"", ""search"", ""search"", ""search"", ""search""]
		[[], [[""hello"", ""leetcode""]], [""hello""], [""hhllo""], [""hell""], [""leetcoded""]]
		Output
		[null, null, false, true, false, false]
		Explanation
		MagicDictionary magicDictionary = new MagicDictionary();
		magicDictionary.buildDict([""hello"", ""leetcode""]);
		magicDictionary.search(""hello""); // return False
		magicDictionary.search(""hhllo""); // We can change the second 'h' to 'e' to match ""hello"" so we return True
		magicDictionary.search(""hell""); // return False
		magicDictionary.search(""leetcoded""); // return False"
"Design a map that allows you to do the following:
			Maps a string key to a given value.
			Returns the sum of the values that have a key with a prefix equal to a given string.
		Implement the MapSum class:
			MapSum() Initializes the MapSum object.
			void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.
			int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.
		Example 1:
		Input
		[""MapSum"", ""insert"", ""sum"", ""insert"", ""sum""]
		[[], [""apple"", 3], [""ap""], [""app"", 2], [""ap""]]
		Output
		[null, null, 3, null, 5]
		Explanation
		MapSum mapSum = new MapSum();
		mapSum.insert(""apple"", 3);  
		mapSum.sum(""ap"");           // return 3 (apple = 3)
		mapSum.insert(""app"", 2);    
		mapSum.sum(""ap"");           // return 5 (apple + app = 3 + 2 = 5)"
"Given a string s containing only three types of characters: '(', ')' and '*', return true if s is valid.
		The following rules define a valid string:
			Any left parenthesis '(' must have a corresponding right parenthesis ')'.
			Any right parenthesis ')' must have a corresponding left parenthesis '('.
			Left parenthesis '(' must go before the corresponding right parenthesis ')'.
			'*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string """".
		Example 1:
		Input: s = ""()""
		Output: true
		Example 2:
		Input: s = ""(*)""
		Output: true
		Example 3:
		Input: s = ""(*))""
		Output: true"
"Given a string s, return true if the s can be palindrome after deleting at most one character from it.
		Example 1:
		Input: s = ""aba""
		Output: true
		Example 2:
		Input: s = ""abca""
		Output: true
		Explanation: You could delete the character 'c'.
		Example 3:
		Input: s = ""abc""
		Output: false"
"You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.
		You are given a list of strings operations, where operations[i] is the ith operation you must apply to the record and is one of the following:
			An integer x.
				Record a new score of x.
			'+'.
				Record a new score that is the sum of the previous two scores.
			'D'.
				Record a new score that is the double of the previous score.
			'C'.
				Invalidate the previous score, removing it from the record.
		Return the sum of all the scores on the record after applying all the operations.
		The test cases are generated such that the answer and all intermediate calculations fit in a 32-bit integer and that all operations are valid.
		Example 1:
		Input: ops = [""5"",""2"",""C"",""D"",""+""]
		Output: 30
		Explanation:
		""5"" - Add 5 to the record, record is now [5].
		""2"" - Add 2 to the record, record is now [5, 2].
		""C"" - Invalidate and remove the previous score, record is now [5].
		""D"" - Add 2 * 5 = 10 to the record, record is now [5, 10].
		""+"" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].
		The total sum is 5 + 10 + 15 = 30.
		Example 2:
		Input: ops = [""5"",""-2"",""4"",""C"",""D"",""9"",""+"",""+""]
		Output: 27
		Explanation:
		""5"" - Add 5 to the record, record is now [5].
		""-2"" - Add -2 to the record, record is now [5, -2].
		""4"" - Add 4 to the record, record is now [5, -2, 4].
		""C"" - Invalidate and remove the previous score, record is now [5, -2].
		""D"" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].
		""9"" - Add 9 to the record, record is now [5, -2, -4, 9].
		""+"" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].
		""+"" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].
		The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.
		Example 3:
		Input: ops = [""1"",""C""]
		Output: 0
		Explanation:
		""1"" - Add 1 to the record, record is now [1].
		""C"" - Invalidate and remove the previous score, record is now [].
		Since the record is empty, the total sum is 0."
"In this problem, a tree is an undirected graph that is connected and has no cycles.
		You are given a graph that started as a tree with n nodes labeled from 1 to n, with one additional edge added. The added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. The graph is represented as an array edges of length n where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the graph.
		Return an edge that can be removed so that the resulting graph is a tree of n nodes. If there are multiple answers, return the answer that occurs last in the input.
		Example 1:
		Input: edges = [[1,2],[1,3],[2,3]]
		Output: [2,3]
		Example 2:
		Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]
		Output: [1,4]"
"Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.
		Notice: string ""abc"" repeated 0 times is """", repeated 1 time is ""abc"" and repeated 2 times is ""abcabc"".
		Example 1:
		Input: a = ""abcd"", b = ""cdabcdab""
		Output: 3
		Explanation: We return 3 because by repeating a three times ""abcdabcdabcd"", b is a substring of it.
		Example 2:
		Input: a = ""a"", b = ""aa""
		Output: 2"
"Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.
		The length of the path between two nodes is represented by the number of edges between them.
		Example 1:
		Input: root = [5,4,5,1,1,null,5]
		Output: 2
		Explanation: The shown image shows that the longest path of the same value (i.e. 5).
		Example 2:
		Input: root = [1,4,5,4,4,null,5]
		Output: 2
		Explanation: The shown image shows that the longest path of the same value (i.e. 4)."
